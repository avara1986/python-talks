<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="554" onload="init(evt)" viewBox="0 0 1200 554" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="554" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --rate 1000 --native -o flamegraphs/binarysearch_native.svg -- python binarysearch_native.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="543.00"> </text><svg id="frames" x="10" width="1180" total_samples="1058"><g><title>_Py_INCREF (object.h:457) (8 samples, 0.76%)</title><rect x="8.7902%" y="148" width="0.7561%" height="15" fill="rgb(227,0,7)" fg:x="93" fg:w="8"/><text x="9.0402%" y="158.50"></text></g><g><title>_Py_INCREF (object.h:459) (36 samples, 3.40%)</title><rect x="9.5463%" y="148" width="3.4026%" height="15" fill="rgb(217,0,24)" fg:x="101" fg:w="36"/><text x="9.7963%" y="158.50">_Py..</text></g><g><title>_Py_INCREF (object.h:460) (11 samples, 1.04%)</title><rect x="12.9490%" y="148" width="1.0397%" height="15" fill="rgb(221,193,54)" fg:x="137" fg:w="11"/><text x="13.1990%" y="158.50"></text></g><g><title>_Py_XDECREF (object.h:539) (8 samples, 0.76%)</title><rect x="13.9887%" y="148" width="0.7561%" height="15" fill="rgb(248,212,6)" fg:x="148" fg:w="8"/><text x="14.2387%" y="158.50"></text></g><g><title>_Py_XDECREF (object.h:541) (4 samples, 0.38%)</title><rect x="14.7448%" y="148" width="0.3781%" height="15" fill="rgb(208,68,35)" fg:x="156" fg:w="4"/><text x="14.9948%" y="158.50"></text></g><g><title>_Py_DECREF (object.h:466) (9 samples, 0.85%)</title><rect x="15.7845%" y="164" width="0.8507%" height="15" fill="rgb(232,128,0)" fg:x="167" fg:w="9"/><text x="16.0345%" y="174.50"></text></g><g><title>_Py_XDECREF (object.h:543) (39 samples, 3.69%)</title><rect x="15.1229%" y="148" width="3.6862%" height="15" fill="rgb(207,160,47)" fg:x="160" fg:w="39"/><text x="15.3729%" y="158.50">_Py_..</text></g><g><title>_Py_DECREF (object.h:470) (23 samples, 2.17%)</title><rect x="16.6352%" y="164" width="2.1739%" height="15" fill="rgb(228,23,34)" fg:x="176" fg:w="23"/><text x="16.8852%" y="174.50">_..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (stl_vector.h:1200) (11 samples, 1.04%)</title><rect x="18.8091%" y="148" width="1.0397%" height="15" fill="rgb(218,30,26)" fg:x="199" fg:w="11"/><text x="19.0591%" y="158.50"></text></g><g><title>std::move&lt;int&amp;&gt; (move.h:99) (2 samples, 0.19%)</title><rect x="21.9282%" y="164" width="0.1890%" height="15" fill="rgb(220,122,19)" fg:x="232" fg:w="2"/><text x="22.1782%" y="174.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:109) (11 samples, 1.04%)</title><rect x="22.1172%" y="164" width="1.0397%" height="15" fill="rgb(250,228,42)" fg:x="234" fg:w="11"/><text x="22.3672%" y="174.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:112) (4 samples, 0.38%)</title><rect x="23.1569%" y="164" width="0.3781%" height="15" fill="rgb(240,193,28)" fg:x="245" fg:w="4"/><text x="23.4069%" y="174.50"></text></g><g><title>std::forward&lt;int&gt; (move.h:74) (8 samples, 0.76%)</title><rect x="24.5747%" y="180" width="0.7561%" height="15" fill="rgb(216,20,37)" fg:x="260" fg:w="8"/><text x="24.8247%" y="190.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:115) (21 samples, 1.98%)</title><rect x="23.5350%" y="164" width="1.9849%" height="15" fill="rgb(206,188,39)" fg:x="249" fg:w="21"/><text x="23.7850%" y="174.50">s..</text></g><g><title>std::forward&lt;int&gt; (move.h:75) (2 samples, 0.19%)</title><rect x="25.3308%" y="180" width="0.1890%" height="15" fill="rgb(217,207,13)" fg:x="268" fg:w="2"/><text x="25.5808%" y="190.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int&gt; (alloc_traits.h:481) (4 samples, 0.38%)</title><rect x="27.9773%" y="180" width="0.3781%" height="15" fill="rgb(231,73,38)" fg:x="296" fg:w="4"/><text x="28.2273%" y="190.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int&gt; (new_allocator.h:144) (9 samples, 0.85%)</title><rect x="30.9074%" y="196" width="0.8507%" height="15" fill="rgb(225,20,46)" fg:x="327" fg:w="9"/><text x="31.1574%" y="206.50"></text></g><g><title>operator new (new:174) (13 samples, 1.23%)</title><rect x="33.9319%" y="212" width="1.2287%" height="15" fill="rgb(210,31,41)" fg:x="359" fg:w="13"/><text x="34.1819%" y="222.50"></text></g><g><title>std::forward&lt;int&gt; (move.h:74) (11 samples, 1.04%)</title><rect x="35.1607%" y="212" width="1.0397%" height="15" fill="rgb(221,200,47)" fg:x="372" fg:w="11"/><text x="35.4107%" y="222.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int&gt; (new_allocator.h:146) (50 samples, 4.73%)</title><rect x="31.7580%" y="196" width="4.7259%" height="15" fill="rgb(226,26,5)" fg:x="336" fg:w="50"/><text x="32.0080%" y="206.50">__gnu_..</text></g><g><title>std::forward&lt;int&gt; (move.h:75) (3 samples, 0.28%)</title><rect x="36.2004%" y="212" width="0.2836%" height="15" fill="rgb(249,33,26)" fg:x="383" fg:w="3"/><text x="36.4504%" y="222.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:117) (129 samples, 12.19%)</title><rect x="25.5198%" y="164" width="12.1928%" height="15" fill="rgb(235,183,28)" fg:x="270" fg:w="129"/><text x="25.7698%" y="174.50">std::vector&lt;int, s..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int&gt; (alloc_traits.h:483) (99 samples, 9.36%)</title><rect x="28.3554%" y="180" width="9.3573%" height="15" fill="rgb(221,5,38)" fg:x="300" fg:w="99"/><text x="28.6054%" y="190.50">std::allocato..</text></g><g><title>std::forward&lt;int&gt; (move.h:74) (13 samples, 1.23%)</title><rect x="36.4839%" y="196" width="1.2287%" height="15" fill="rgb(247,18,42)" fg:x="386" fg:w="13"/><text x="36.7339%" y="206.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (vector.tcc:461) (8 samples, 0.76%)</title><rect x="38.5633%" y="180" width="0.7561%" height="15" fill="rgb(241,131,45)" fg:x="408" fg:w="8"/><text x="38.8133%" y="190.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_relocate (stl_vector.h:467) (8 samples, 0.76%)</title><rect x="38.5633%" y="196" width="0.7561%" height="15" fill="rgb(249,31,29)" fg:x="408" fg:w="8"/><text x="38.8133%" y="206.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_do_relocate (stl_vector.h:454) (8 samples, 0.76%)</title><rect x="38.5633%" y="212" width="0.7561%" height="15" fill="rgb(225,111,53)" fg:x="408" fg:w="8"/><text x="38.8133%" y="222.50"></text></g><g><title>std::__relocate_a&lt;int*, int*, std::allocator&lt;int&gt; &gt; (stl_uninitialized.h:967) (8 samples, 0.76%)</title><rect x="38.5633%" y="228" width="0.7561%" height="15" fill="rgb(238,160,17)" fg:x="408" fg:w="8"/><text x="38.8133%" y="238.50"></text></g><g><title>std::__relocate_a_1&lt;int, int&gt; (stl_uninitialized.h:930) (8 samples, 0.76%)</title><rect x="38.5633%" y="244" width="0.7561%" height="15" fill="rgb(214,148,48)" fg:x="408" fg:w="8"/><text x="38.8133%" y="254.50"></text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (7 samples, 0.66%)</title><rect x="38.6578%" y="260" width="0.6616%" height="15" fill="rgb(232,36,49)" fg:x="409" fg:w="7"/><text x="38.9078%" y="270.50"></text></g><g><title>__pyx_convert_vector_from_py_int (vector.from_py:47) (416 samples, 39.32%)</title><rect x="0.0945%" y="132" width="39.3195%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="416"/><text x="0.3445%" y="142.50">__pyx_convert_vector_from_py_int (vector.from_py:47)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (stl_vector.h:1201) (207 samples, 19.57%)</title><rect x="19.8488%" y="148" width="19.5652%" height="15" fill="rgb(229,88,8)" fg:x="210" fg:w="207"/><text x="20.0988%" y="158.50">std::vector&lt;int, std::allocator..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:125) (18 samples, 1.70%)</title><rect x="37.7127%" y="164" width="1.7013%" height="15" fill="rgb(213,181,19)" fg:x="399" fg:w="18"/><text x="37.9627%" y="174.50"></text></g><g><title>__pyx_convert_vector_from_py_int (vector.from_py:48) (87 samples, 8.22%)</title><rect x="39.4140%" y="132" width="8.2231%" height="15" fill="rgb(254,191,54)" fg:x="417" fg:w="87"/><text x="39.6640%" y="142.50">__pyx_conve..</text></g><g><title>__Pyx_PyInt_As_int (vector.from_py:45) (66 samples, 6.24%)</title><rect x="41.3989%" y="148" width="6.2382%" height="15" fill="rgb(241,83,37)" fg:x="438" fg:w="66"/><text x="41.6489%" y="158.50">__Pyx_Py..</text></g><g><title>__pyx_convert_vector_from_py_int (vector.from_py:49) (5 samples, 0.47%)</title><rect x="47.6371%" y="132" width="0.4726%" height="15" fill="rgb(233,36,39)" fg:x="504" fg:w="5"/><text x="47.8871%" y="142.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator= (vector.tcc:226) (4 samples, 0.38%)</title><rect x="47.7316%" y="148" width="0.3781%" height="15" fill="rgb(226,3,54)" fg:x="505" fg:w="4"/><text x="47.9816%" y="158.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (stl_vector.h:1513) (4 samples, 0.38%)</title><rect x="47.7316%" y="164" width="0.3781%" height="15" fill="rgb(245,192,40)" fg:x="505" fg:w="4"/><text x="47.9816%" y="174.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (4 samples, 0.38%)</title><rect x="47.7316%" y="180" width="0.3781%" height="15" fill="rgb(238,167,29)" fg:x="505" fg:w="4"/><text x="47.9816%" y="190.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (4 samples, 0.38%)</title><rect x="47.7316%" y="196" width="0.3781%" height="15" fill="rgb(232,182,51)" fg:x="505" fg:w="4"/><text x="47.9816%" y="206.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (4 samples, 0.38%)</title><rect x="47.7316%" y="212" width="0.3781%" height="15" fill="rgb(231,60,39)" fg:x="505" fg:w="4"/><text x="47.9816%" y="222.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (4 samples, 0.38%)</title><rect x="47.7316%" y="228" width="0.3781%" height="15" fill="rgb(208,69,12)" fg:x="505" fg:w="4"/><text x="47.9816%" y="238.50"></text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (4 samples, 0.38%)</title><rect x="47.7316%" y="244" width="0.3781%" height="15" fill="rgb(235,93,37)" fg:x="505" fg:w="4"/><text x="47.9816%" y="254.50"></text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (4 samples, 0.38%)</title><rect x="47.7316%" y="260" width="0.3781%" height="15" fill="rgb(213,116,39)" fg:x="505" fg:w="4"/><text x="47.9816%" y="270.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (4 samples, 0.38%)</title><rect x="47.7316%" y="276" width="0.3781%" height="15" fill="rgb(222,207,29)" fg:x="505" fg:w="4"/><text x="47.9816%" y="286.50"></text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (4 samples, 0.38%)</title><rect x="47.7316%" y="292" width="0.3781%" height="15" fill="rgb(206,96,30)" fg:x="505" fg:w="4"/><text x="47.9816%" y="302.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (39 samples, 3.69%)</title><rect x="48.1096%" y="372" width="3.6862%" height="15" fill="rgb(218,138,4)" fg:x="509" fg:w="39"/><text x="48.3596%" y="382.50">bins..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (39 samples, 3.69%)</title><rect x="48.1096%" y="388" width="3.6862%" height="15" fill="rgb(250,191,14)" fg:x="509" fg:w="39"/><text x="48.3596%" y="398.50">std:..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (39 samples, 3.69%)</title><rect x="48.1096%" y="404" width="3.6862%" height="15" fill="rgb(239,60,40)" fg:x="509" fg:w="39"/><text x="48.3596%" y="414.50">std:..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (39 samples, 3.69%)</title><rect x="48.1096%" y="420" width="3.6862%" height="15" fill="rgb(206,27,48)" fg:x="509" fg:w="39"/><text x="48.3596%" y="430.50">std:..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (39 samples, 3.69%)</title><rect x="48.1096%" y="436" width="3.6862%" height="15" fill="rgb(225,35,8)" fg:x="509" fg:w="39"/><text x="48.3596%" y="446.50">std:..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (39 samples, 3.69%)</title><rect x="48.1096%" y="452" width="3.6862%" height="15" fill="rgb(250,213,24)" fg:x="509" fg:w="39"/><text x="48.3596%" y="462.50">std:..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (39 samples, 3.69%)</title><rect x="48.1096%" y="468" width="3.6862%" height="15" fill="rgb(247,123,22)" fg:x="509" fg:w="39"/><text x="48.3596%" y="478.50">std:..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (39 samples, 3.69%)</title><rect x="48.1096%" y="484" width="3.6862%" height="15" fill="rgb(231,138,38)" fg:x="509" fg:w="39"/><text x="48.3596%" y="494.50">std:..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (39 samples, 3.69%)</title><rect x="48.1096%" y="500" width="3.6862%" height="15" fill="rgb(231,145,46)" fg:x="509" fg:w="39"/><text x="48.3596%" y="510.50">std:..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (39 samples, 3.69%)</title><rect x="48.1096%" y="516" width="3.6862%" height="15" fill="rgb(251,118,11)" fg:x="509" fg:w="39"/><text x="48.3596%" y="526.50">0x73..</text></g><g><title>binsearch (binarysearch.hpp:14) (75 samples, 7.09%)</title><rect x="48.1096%" y="356" width="7.0888%" height="15" fill="rgb(217,147,25)" fg:x="509" fg:w="75"/><text x="48.3596%" y="366.50">binsearch ..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (34 samples, 3.21%)</title><rect x="51.9849%" y="372" width="3.2136%" height="15" fill="rgb(247,81,37)" fg:x="550" fg:w="34"/><text x="52.2349%" y="382.50">std..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (34 samples, 3.21%)</title><rect x="51.9849%" y="388" width="3.2136%" height="15" fill="rgb(209,12,38)" fg:x="550" fg:w="34"/><text x="52.2349%" y="398.50">std..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (34 samples, 3.21%)</title><rect x="51.9849%" y="404" width="3.2136%" height="15" fill="rgb(227,1,9)" fg:x="550" fg:w="34"/><text x="52.2349%" y="414.50">std..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (34 samples, 3.21%)</title><rect x="51.9849%" y="420" width="3.2136%" height="15" fill="rgb(248,47,43)" fg:x="550" fg:w="34"/><text x="52.2349%" y="430.50">std..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (34 samples, 3.21%)</title><rect x="51.9849%" y="436" width="3.2136%" height="15" fill="rgb(221,10,30)" fg:x="550" fg:w="34"/><text x="52.2349%" y="446.50">std..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (34 samples, 3.21%)</title><rect x="51.9849%" y="452" width="3.2136%" height="15" fill="rgb(210,229,1)" fg:x="550" fg:w="34"/><text x="52.2349%" y="462.50">std..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (34 samples, 3.21%)</title><rect x="51.9849%" y="468" width="3.2136%" height="15" fill="rgb(222,148,37)" fg:x="550" fg:w="34"/><text x="52.2349%" y="478.50">std..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (34 samples, 3.21%)</title><rect x="51.9849%" y="484" width="3.2136%" height="15" fill="rgb(234,67,33)" fg:x="550" fg:w="34"/><text x="52.2349%" y="494.50">std..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (34 samples, 3.21%)</title><rect x="51.9849%" y="500" width="3.2136%" height="15" fill="rgb(247,98,35)" fg:x="550" fg:w="34"/><text x="52.2349%" y="510.50">0x7..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (24 samples, 2.27%)</title><rect x="55.2930%" y="356" width="2.2684%" height="15" fill="rgb(247,138,52)" fg:x="585" fg:w="24"/><text x="55.5430%" y="366.50">s..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (24 samples, 2.27%)</title><rect x="55.2930%" y="372" width="2.2684%" height="15" fill="rgb(213,79,30)" fg:x="585" fg:w="24"/><text x="55.5430%" y="382.50">s..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (24 samples, 2.27%)</title><rect x="55.2930%" y="388" width="2.2684%" height="15" fill="rgb(246,177,23)" fg:x="585" fg:w="24"/><text x="55.5430%" y="398.50">s..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (24 samples, 2.27%)</title><rect x="55.2930%" y="404" width="2.2684%" height="15" fill="rgb(230,62,27)" fg:x="585" fg:w="24"/><text x="55.5430%" y="414.50">s..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (24 samples, 2.27%)</title><rect x="55.2930%" y="420" width="2.2684%" height="15" fill="rgb(216,154,8)" fg:x="585" fg:w="24"/><text x="55.5430%" y="430.50">s..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (24 samples, 2.27%)</title><rect x="55.2930%" y="436" width="2.2684%" height="15" fill="rgb(244,35,45)" fg:x="585" fg:w="24"/><text x="55.5430%" y="446.50">s..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (24 samples, 2.27%)</title><rect x="55.2930%" y="452" width="2.2684%" height="15" fill="rgb(251,115,12)" fg:x="585" fg:w="24"/><text x="55.5430%" y="462.50">s..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (24 samples, 2.27%)</title><rect x="55.2930%" y="468" width="2.2684%" height="15" fill="rgb(240,54,50)" fg:x="585" fg:w="24"/><text x="55.5430%" y="478.50">s..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (24 samples, 2.27%)</title><rect x="55.2930%" y="484" width="2.2684%" height="15" fill="rgb(233,84,52)" fg:x="585" fg:w="24"/><text x="55.5430%" y="494.50">0..</text></g><g><title>binsearch (binarysearch.hpp:12) (115 samples, 10.87%)</title><rect x="48.1096%" y="340" width="10.8696%" height="15" fill="rgb(207,117,47)" fg:x="509" fg:w="115"/><text x="48.3596%" y="350.50">binsearch (binar..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:680) (14 samples, 1.32%)</title><rect x="57.6560%" y="356" width="1.3233%" height="15" fill="rgb(249,43,39)" fg:x="610" fg:w="14"/><text x="57.9060%" y="366.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:334) (14 samples, 1.32%)</title><rect x="57.6560%" y="372" width="1.3233%" height="15" fill="rgb(209,38,44)" fg:x="610" fg:w="14"/><text x="57.9060%" y="382.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:352) (14 samples, 1.32%)</title><rect x="57.6560%" y="388" width="1.3233%" height="15" fill="rgb(236,212,23)" fg:x="610" fg:w="14"/><text x="57.9060%" y="398.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:469) (14 samples, 1.32%)</title><rect x="57.6560%" y="404" width="1.3233%" height="15" fill="rgb(242,79,21)" fg:x="610" fg:w="14"/><text x="57.9060%" y="414.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:129) (14 samples, 1.32%)</title><rect x="57.6560%" y="420" width="1.3233%" height="15" fill="rgb(211,96,35)" fg:x="610" fg:w="14"/><text x="57.9060%" y="430.50"></text></g><g><title>0x73ddfc06800d (libc-2.31.so) (13 samples, 1.23%)</title><rect x="57.7505%" y="436" width="1.2287%" height="15" fill="rgb(253,215,40)" fg:x="611" fg:w="13"/><text x="58.0005%" y="446.50"></text></g><g><title>0x73ddfc0677ea (libc-2.31.so) (13 samples, 1.23%)</title><rect x="57.7505%" y="452" width="1.2287%" height="15" fill="rgb(211,81,21)" fg:x="611" fg:w="13"/><text x="58.0005%" y="462.50"></text></g><g><title>__default_morecore (libc-2.31.so) (13 samples, 1.23%)</title><rect x="57.7505%" y="468" width="1.2287%" height="15" fill="rgb(208,190,38)" fg:x="611" fg:w="13"/><text x="58.0005%" y="478.50"></text></g><g><title>sbrk (libc-2.31.so) (13 samples, 1.23%)</title><rect x="57.7505%" y="484" width="1.2287%" height="15" fill="rgb(235,213,38)" fg:x="611" fg:w="13"/><text x="58.0005%" y="494.50"></text></g><g><title>brk (libc-2.31.so) (13 samples, 1.23%)</title><rect x="57.7505%" y="500" width="1.2287%" height="15" fill="rgb(237,122,38)" fg:x="611" fg:w="13"/><text x="58.0005%" y="510.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (136 samples, 12.85%)</title><rect x="48.1096%" y="324" width="12.8544%" height="15" fill="rgb(244,218,35)" fg:x="509" fg:w="136"/><text x="48.3596%" y="334.50">binsearch (binaryse..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (21 samples, 1.98%)</title><rect x="58.9792%" y="340" width="1.9849%" height="15" fill="rgb(240,68,47)" fg:x="624" fg:w="21"/><text x="59.2292%" y="350.50">s..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (21 samples, 1.98%)</title><rect x="58.9792%" y="356" width="1.9849%" height="15" fill="rgb(210,16,53)" fg:x="624" fg:w="21"/><text x="59.2292%" y="366.50">s..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (21 samples, 1.98%)</title><rect x="58.9792%" y="372" width="1.9849%" height="15" fill="rgb(235,124,12)" fg:x="624" fg:w="21"/><text x="59.2292%" y="382.50">s..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (21 samples, 1.98%)</title><rect x="58.9792%" y="388" width="1.9849%" height="15" fill="rgb(224,169,11)" fg:x="624" fg:w="21"/><text x="59.2292%" y="398.50">s..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (21 samples, 1.98%)</title><rect x="58.9792%" y="404" width="1.9849%" height="15" fill="rgb(250,166,2)" fg:x="624" fg:w="21"/><text x="59.2292%" y="414.50">s..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (21 samples, 1.98%)</title><rect x="58.9792%" y="420" width="1.9849%" height="15" fill="rgb(242,216,29)" fg:x="624" fg:w="21"/><text x="59.2292%" y="430.50">s..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (21 samples, 1.98%)</title><rect x="58.9792%" y="436" width="1.9849%" height="15" fill="rgb(230,116,27)" fg:x="624" fg:w="21"/><text x="59.2292%" y="446.50">s..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (21 samples, 1.98%)</title><rect x="58.9792%" y="452" width="1.9849%" height="15" fill="rgb(228,99,48)" fg:x="624" fg:w="21"/><text x="59.2292%" y="462.50">s..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (21 samples, 1.98%)</title><rect x="58.9792%" y="468" width="1.9849%" height="15" fill="rgb(253,11,6)" fg:x="624" fg:w="21"/><text x="59.2292%" y="478.50">0..</text></g><g><title>binsearch (binarysearch.hpp:12) (158 samples, 14.93%)</title><rect x="48.1096%" y="308" width="14.9338%" height="15" fill="rgb(247,143,39)" fg:x="509" fg:w="158"/><text x="48.3596%" y="318.50">binsearch (binarysearch..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (22 samples, 2.08%)</title><rect x="60.9641%" y="324" width="2.0794%" height="15" fill="rgb(236,97,10)" fg:x="645" fg:w="22"/><text x="61.2141%" y="334.50">s..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (22 samples, 2.08%)</title><rect x="60.9641%" y="340" width="2.0794%" height="15" fill="rgb(233,208,19)" fg:x="645" fg:w="22"/><text x="61.2141%" y="350.50">s..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (22 samples, 2.08%)</title><rect x="60.9641%" y="356" width="2.0794%" height="15" fill="rgb(216,164,2)" fg:x="645" fg:w="22"/><text x="61.2141%" y="366.50">s..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (22 samples, 2.08%)</title><rect x="60.9641%" y="372" width="2.0794%" height="15" fill="rgb(220,129,5)" fg:x="645" fg:w="22"/><text x="61.2141%" y="382.50">s..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (22 samples, 2.08%)</title><rect x="60.9641%" y="388" width="2.0794%" height="15" fill="rgb(242,17,10)" fg:x="645" fg:w="22"/><text x="61.2141%" y="398.50">s..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (22 samples, 2.08%)</title><rect x="60.9641%" y="404" width="2.0794%" height="15" fill="rgb(242,107,0)" fg:x="645" fg:w="22"/><text x="61.2141%" y="414.50">s..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (22 samples, 2.08%)</title><rect x="60.9641%" y="420" width="2.0794%" height="15" fill="rgb(251,28,31)" fg:x="645" fg:w="22"/><text x="61.2141%" y="430.50">s..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (22 samples, 2.08%)</title><rect x="60.9641%" y="436" width="2.0794%" height="15" fill="rgb(233,223,10)" fg:x="645" fg:w="22"/><text x="61.2141%" y="446.50">s..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (22 samples, 2.08%)</title><rect x="60.9641%" y="452" width="2.0794%" height="15" fill="rgb(215,21,27)" fg:x="645" fg:w="22"/><text x="61.2141%" y="462.50">0..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (26 samples, 2.46%)</title><rect x="63.1380%" y="308" width="2.4575%" height="15" fill="rgb(232,23,21)" fg:x="668" fg:w="26"/><text x="63.3880%" y="318.50">st..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (26 samples, 2.46%)</title><rect x="63.1380%" y="324" width="2.4575%" height="15" fill="rgb(244,5,23)" fg:x="668" fg:w="26"/><text x="63.3880%" y="334.50">st..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (26 samples, 2.46%)</title><rect x="63.1380%" y="340" width="2.4575%" height="15" fill="rgb(226,81,46)" fg:x="668" fg:w="26"/><text x="63.3880%" y="350.50">st..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (26 samples, 2.46%)</title><rect x="63.1380%" y="356" width="2.4575%" height="15" fill="rgb(247,70,30)" fg:x="668" fg:w="26"/><text x="63.3880%" y="366.50">st..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (26 samples, 2.46%)</title><rect x="63.1380%" y="372" width="2.4575%" height="15" fill="rgb(212,68,19)" fg:x="668" fg:w="26"/><text x="63.3880%" y="382.50">st..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (26 samples, 2.46%)</title><rect x="63.1380%" y="388" width="2.4575%" height="15" fill="rgb(240,187,13)" fg:x="668" fg:w="26"/><text x="63.3880%" y="398.50">st..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (26 samples, 2.46%)</title><rect x="63.1380%" y="404" width="2.4575%" height="15" fill="rgb(223,113,26)" fg:x="668" fg:w="26"/><text x="63.3880%" y="414.50">st..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (26 samples, 2.46%)</title><rect x="63.1380%" y="420" width="2.4575%" height="15" fill="rgb(206,192,2)" fg:x="668" fg:w="26"/><text x="63.3880%" y="430.50">st..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (26 samples, 2.46%)</title><rect x="63.1380%" y="436" width="2.4575%" height="15" fill="rgb(241,108,4)" fg:x="668" fg:w="26"/><text x="63.3880%" y="446.50">0x..</text></g><g><title>binsearch (binarysearch.hpp:14) (198 samples, 18.71%)</title><rect x="48.1096%" y="292" width="18.7146%" height="15" fill="rgb(247,173,49)" fg:x="509" fg:w="198"/><text x="48.3596%" y="302.50">binsearch (binarysearch.hpp:1..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:680) (13 samples, 1.23%)</title><rect x="65.5955%" y="308" width="1.2287%" height="15" fill="rgb(224,114,35)" fg:x="694" fg:w="13"/><text x="65.8455%" y="318.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:334) (13 samples, 1.23%)</title><rect x="65.5955%" y="324" width="1.2287%" height="15" fill="rgb(245,159,27)" fg:x="694" fg:w="13"/><text x="65.8455%" y="334.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:352) (13 samples, 1.23%)</title><rect x="65.5955%" y="340" width="1.2287%" height="15" fill="rgb(245,172,44)" fg:x="694" fg:w="13"/><text x="65.8455%" y="350.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:469) (13 samples, 1.23%)</title><rect x="65.5955%" y="356" width="1.2287%" height="15" fill="rgb(236,23,11)" fg:x="694" fg:w="13"/><text x="65.8455%" y="366.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:129) (13 samples, 1.23%)</title><rect x="65.5955%" y="372" width="1.2287%" height="15" fill="rgb(205,117,38)" fg:x="694" fg:w="13"/><text x="65.8455%" y="382.50"></text></g><g><title>0x73ddfc06800d (libc-2.31.so) (13 samples, 1.23%)</title><rect x="65.5955%" y="388" width="1.2287%" height="15" fill="rgb(237,72,25)" fg:x="694" fg:w="13"/><text x="65.8455%" y="398.50"></text></g><g><title>0x73ddfc0677ea (libc-2.31.so) (13 samples, 1.23%)</title><rect x="65.5955%" y="404" width="1.2287%" height="15" fill="rgb(244,70,9)" fg:x="694" fg:w="13"/><text x="65.8455%" y="414.50"></text></g><g><title>__default_morecore (libc-2.31.so) (13 samples, 1.23%)</title><rect x="65.5955%" y="420" width="1.2287%" height="15" fill="rgb(217,125,39)" fg:x="694" fg:w="13"/><text x="65.8455%" y="430.50"></text></g><g><title>sbrk (libc-2.31.so) (13 samples, 1.23%)</title><rect x="65.5955%" y="436" width="1.2287%" height="15" fill="rgb(235,36,10)" fg:x="694" fg:w="13"/><text x="65.8455%" y="446.50"></text></g><g><title>brk (libc-2.31.so) (13 samples, 1.23%)</title><rect x="65.5955%" y="452" width="1.2287%" height="15" fill="rgb(251,123,47)" fg:x="694" fg:w="13"/><text x="65.8455%" y="462.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (221 samples, 20.89%)</title><rect x="48.1096%" y="276" width="20.8885%" height="15" fill="rgb(221,13,13)" fg:x="509" fg:w="221"/><text x="48.3596%" y="286.50">binsearch (binarysearch.hpp:12)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (22 samples, 2.08%)</title><rect x="66.9187%" y="292" width="2.0794%" height="15" fill="rgb(238,131,9)" fg:x="708" fg:w="22"/><text x="67.1687%" y="302.50">s..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (22 samples, 2.08%)</title><rect x="66.9187%" y="308" width="2.0794%" height="15" fill="rgb(211,50,8)" fg:x="708" fg:w="22"/><text x="67.1687%" y="318.50">s..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (22 samples, 2.08%)</title><rect x="66.9187%" y="324" width="2.0794%" height="15" fill="rgb(245,182,24)" fg:x="708" fg:w="22"/><text x="67.1687%" y="334.50">s..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (22 samples, 2.08%)</title><rect x="66.9187%" y="340" width="2.0794%" height="15" fill="rgb(242,14,37)" fg:x="708" fg:w="22"/><text x="67.1687%" y="350.50">s..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (22 samples, 2.08%)</title><rect x="66.9187%" y="356" width="2.0794%" height="15" fill="rgb(246,228,12)" fg:x="708" fg:w="22"/><text x="67.1687%" y="366.50">s..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (22 samples, 2.08%)</title><rect x="66.9187%" y="372" width="2.0794%" height="15" fill="rgb(213,55,15)" fg:x="708" fg:w="22"/><text x="67.1687%" y="382.50">s..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (22 samples, 2.08%)</title><rect x="66.9187%" y="388" width="2.0794%" height="15" fill="rgb(209,9,3)" fg:x="708" fg:w="22"/><text x="67.1687%" y="398.50">s..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (22 samples, 2.08%)</title><rect x="66.9187%" y="404" width="2.0794%" height="15" fill="rgb(230,59,30)" fg:x="708" fg:w="22"/><text x="67.1687%" y="414.50">s..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (22 samples, 2.08%)</title><rect x="66.9187%" y="420" width="2.0794%" height="15" fill="rgb(209,121,21)" fg:x="708" fg:w="22"/><text x="67.1687%" y="430.50">0..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (38 samples, 3.59%)</title><rect x="68.9981%" y="276" width="3.5917%" height="15" fill="rgb(220,109,13)" fg:x="730" fg:w="38"/><text x="69.2481%" y="286.50">std:..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (38 samples, 3.59%)</title><rect x="68.9981%" y="292" width="3.5917%" height="15" fill="rgb(232,18,1)" fg:x="730" fg:w="38"/><text x="69.2481%" y="302.50">std:..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (38 samples, 3.59%)</title><rect x="68.9981%" y="308" width="3.5917%" height="15" fill="rgb(215,41,42)" fg:x="730" fg:w="38"/><text x="69.2481%" y="318.50">std:..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (38 samples, 3.59%)</title><rect x="68.9981%" y="324" width="3.5917%" height="15" fill="rgb(224,123,36)" fg:x="730" fg:w="38"/><text x="69.2481%" y="334.50">std:..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (38 samples, 3.59%)</title><rect x="68.9981%" y="340" width="3.5917%" height="15" fill="rgb(240,125,3)" fg:x="730" fg:w="38"/><text x="69.2481%" y="350.50">std:..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (38 samples, 3.59%)</title><rect x="68.9981%" y="356" width="3.5917%" height="15" fill="rgb(205,98,50)" fg:x="730" fg:w="38"/><text x="69.2481%" y="366.50">std:..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (38 samples, 3.59%)</title><rect x="68.9981%" y="372" width="3.5917%" height="15" fill="rgb(205,185,37)" fg:x="730" fg:w="38"/><text x="69.2481%" y="382.50">std:..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (38 samples, 3.59%)</title><rect x="68.9981%" y="388" width="3.5917%" height="15" fill="rgb(238,207,15)" fg:x="730" fg:w="38"/><text x="69.2481%" y="398.50">std:..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (38 samples, 3.59%)</title><rect x="68.9981%" y="404" width="3.5917%" height="15" fill="rgb(213,199,42)" fg:x="730" fg:w="38"/><text x="69.2481%" y="414.50">0x73..</text></g><g><title>binsearch (binarysearch.hpp:14) (260 samples, 24.57%)</title><rect x="48.1096%" y="260" width="24.5747%" height="15" fill="rgb(235,201,11)" fg:x="509" fg:w="260"/><text x="48.3596%" y="270.50">binsearch (binarysearch.hpp:14)</text></g><g><title>0x73ddfc06837a (libc-2.31.so) (3 samples, 0.28%)</title><rect x="72.6843%" y="404" width="0.2836%" height="15" fill="rgb(207,46,11)" fg:x="769" fg:w="3"/><text x="72.9343%" y="414.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:552) (4 samples, 0.38%)</title><rect x="72.6843%" y="260" width="0.3781%" height="15" fill="rgb(241,35,35)" fg:x="769" fg:w="4"/><text x="72.9343%" y="270.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (stl_vector.h:302) (4 samples, 0.38%)</title><rect x="72.6843%" y="276" width="0.3781%" height="15" fill="rgb(243,32,47)" fg:x="769" fg:w="4"/><text x="72.9343%" y="286.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (stl_vector.h:358) (4 samples, 0.38%)</title><rect x="72.6843%" y="292" width="0.3781%" height="15" fill="rgb(247,202,23)" fg:x="769" fg:w="4"/><text x="72.9343%" y="302.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (stl_vector.h:343) (4 samples, 0.38%)</title><rect x="72.6843%" y="308" width="0.3781%" height="15" fill="rgb(219,102,11)" fg:x="769" fg:w="4"/><text x="72.9343%" y="318.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::allocate (alloc_traits.h:443) (4 samples, 0.38%)</title><rect x="72.6843%" y="324" width="0.3781%" height="15" fill="rgb(243,110,44)" fg:x="769" fg:w="4"/><text x="72.9343%" y="334.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (new_allocator.h:115) (4 samples, 0.38%)</title><rect x="72.6843%" y="340" width="0.3781%" height="15" fill="rgb(222,74,54)" fg:x="769" fg:w="4"/><text x="72.9343%" y="350.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (4 samples, 0.38%)</title><rect x="72.6843%" y="356" width="0.3781%" height="15" fill="rgb(216,99,12)" fg:x="769" fg:w="4"/><text x="72.9343%" y="366.50"></text></g><g><title>malloc (libc-2.31.so) (4 samples, 0.38%)</title><rect x="72.6843%" y="372" width="0.3781%" height="15" fill="rgb(226,22,26)" fg:x="769" fg:w="4"/><text x="72.9343%" y="382.50"></text></g><g><title>0x73ddfc069793 (libc-2.31.so) (4 samples, 0.38%)</title><rect x="72.6843%" y="388" width="0.3781%" height="15" fill="rgb(217,163,10)" fg:x="769" fg:w="4"/><text x="72.9343%" y="398.50"></text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (20 samples, 1.89%)</title><rect x="73.0624%" y="356" width="1.8904%" height="15" fill="rgb(213,25,53)" fg:x="773" fg:w="20"/><text x="73.3124%" y="366.50">s..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (20 samples, 1.89%)</title><rect x="73.0624%" y="372" width="1.8904%" height="15" fill="rgb(252,105,26)" fg:x="773" fg:w="20"/><text x="73.3124%" y="382.50">s..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (20 samples, 1.89%)</title><rect x="73.0624%" y="388" width="1.8904%" height="15" fill="rgb(220,39,43)" fg:x="773" fg:w="20"/><text x="73.3124%" y="398.50">0..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (21 samples, 1.98%)</title><rect x="73.0624%" y="260" width="1.9849%" height="15" fill="rgb(229,68,48)" fg:x="773" fg:w="21"/><text x="73.3124%" y="270.50">s..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (21 samples, 1.98%)</title><rect x="73.0624%" y="276" width="1.9849%" height="15" fill="rgb(252,8,32)" fg:x="773" fg:w="21"/><text x="73.3124%" y="286.50">s..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (21 samples, 1.98%)</title><rect x="73.0624%" y="292" width="1.9849%" height="15" fill="rgb(223,20,43)" fg:x="773" fg:w="21"/><text x="73.3124%" y="302.50">s..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (21 samples, 1.98%)</title><rect x="73.0624%" y="308" width="1.9849%" height="15" fill="rgb(229,81,49)" fg:x="773" fg:w="21"/><text x="73.3124%" y="318.50">s..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (21 samples, 1.98%)</title><rect x="73.0624%" y="324" width="1.9849%" height="15" fill="rgb(236,28,36)" fg:x="773" fg:w="21"/><text x="73.3124%" y="334.50">s..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (21 samples, 1.98%)</title><rect x="73.0624%" y="340" width="1.9849%" height="15" fill="rgb(249,185,26)" fg:x="773" fg:w="21"/><text x="73.3124%" y="350.50">s..</text></g><g><title>binsearch (binarysearch.hpp:12) (303 samples, 28.64%)</title><rect x="48.1096%" y="244" width="28.6389%" height="15" fill="rgb(249,174,33)" fg:x="509" fg:w="303"/><text x="48.3596%" y="254.50">binsearch (binarysearch.hpp:12)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:680) (18 samples, 1.70%)</title><rect x="75.0473%" y="260" width="1.7013%" height="15" fill="rgb(233,201,37)" fg:x="794" fg:w="18"/><text x="75.2973%" y="270.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:334) (18 samples, 1.70%)</title><rect x="75.0473%" y="276" width="1.7013%" height="15" fill="rgb(221,78,26)" fg:x="794" fg:w="18"/><text x="75.2973%" y="286.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:352) (18 samples, 1.70%)</title><rect x="75.0473%" y="292" width="1.7013%" height="15" fill="rgb(250,127,30)" fg:x="794" fg:w="18"/><text x="75.2973%" y="302.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:469) (18 samples, 1.70%)</title><rect x="75.0473%" y="308" width="1.7013%" height="15" fill="rgb(230,49,44)" fg:x="794" fg:w="18"/><text x="75.2973%" y="318.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:129) (18 samples, 1.70%)</title><rect x="75.0473%" y="324" width="1.7013%" height="15" fill="rgb(229,67,23)" fg:x="794" fg:w="18"/><text x="75.2973%" y="334.50"></text></g><g><title>0x73ddfc06800d (libc-2.31.so) (18 samples, 1.70%)</title><rect x="75.0473%" y="340" width="1.7013%" height="15" fill="rgb(249,83,47)" fg:x="794" fg:w="18"/><text x="75.2973%" y="350.50"></text></g><g><title>0x73ddfc0677ea (libc-2.31.so) (18 samples, 1.70%)</title><rect x="75.0473%" y="356" width="1.7013%" height="15" fill="rgb(215,43,3)" fg:x="794" fg:w="18"/><text x="75.2973%" y="366.50"></text></g><g><title>__default_morecore (libc-2.31.so) (18 samples, 1.70%)</title><rect x="75.0473%" y="372" width="1.7013%" height="15" fill="rgb(238,154,13)" fg:x="794" fg:w="18"/><text x="75.2973%" y="382.50"></text></g><g><title>sbrk (libc-2.31.so) (18 samples, 1.70%)</title><rect x="75.0473%" y="388" width="1.7013%" height="15" fill="rgb(219,56,2)" fg:x="794" fg:w="18"/><text x="75.2973%" y="398.50"></text></g><g><title>brk (libc-2.31.so) (18 samples, 1.70%)</title><rect x="75.0473%" y="404" width="1.7013%" height="15" fill="rgb(233,0,4)" fg:x="794" fg:w="18"/><text x="75.2973%" y="414.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (335 samples, 31.66%)</title><rect x="48.1096%" y="228" width="31.6635%" height="15" fill="rgb(235,30,7)" fg:x="509" fg:w="335"/><text x="48.3596%" y="238.50">binsearch (binarysearch.hpp:14)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (32 samples, 3.02%)</title><rect x="76.7486%" y="244" width="3.0246%" height="15" fill="rgb(250,79,13)" fg:x="812" fg:w="32"/><text x="76.9986%" y="254.50">std..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (32 samples, 3.02%)</title><rect x="76.7486%" y="260" width="3.0246%" height="15" fill="rgb(211,146,34)" fg:x="812" fg:w="32"/><text x="76.9986%" y="270.50">std..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (32 samples, 3.02%)</title><rect x="76.7486%" y="276" width="3.0246%" height="15" fill="rgb(228,22,38)" fg:x="812" fg:w="32"/><text x="76.9986%" y="286.50">std..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (32 samples, 3.02%)</title><rect x="76.7486%" y="292" width="3.0246%" height="15" fill="rgb(235,168,5)" fg:x="812" fg:w="32"/><text x="76.9986%" y="302.50">std..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (32 samples, 3.02%)</title><rect x="76.7486%" y="308" width="3.0246%" height="15" fill="rgb(221,155,16)" fg:x="812" fg:w="32"/><text x="76.9986%" y="318.50">std..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (32 samples, 3.02%)</title><rect x="76.7486%" y="324" width="3.0246%" height="15" fill="rgb(215,215,53)" fg:x="812" fg:w="32"/><text x="76.9986%" y="334.50">std..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (32 samples, 3.02%)</title><rect x="76.7486%" y="340" width="3.0246%" height="15" fill="rgb(223,4,10)" fg:x="812" fg:w="32"/><text x="76.9986%" y="350.50">std..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (32 samples, 3.02%)</title><rect x="76.7486%" y="356" width="3.0246%" height="15" fill="rgb(234,103,6)" fg:x="812" fg:w="32"/><text x="76.9986%" y="366.50">std..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (32 samples, 3.02%)</title><rect x="76.7486%" y="372" width="3.0246%" height="15" fill="rgb(227,97,0)" fg:x="812" fg:w="32"/><text x="76.9986%" y="382.50">0x7..</text></g><g><title>binsearch (binarysearch.hpp:12) (361 samples, 34.12%)</title><rect x="48.1096%" y="212" width="34.1210%" height="15" fill="rgb(234,150,53)" fg:x="509" fg:w="361"/><text x="48.3596%" y="222.50">binsearch (binarysearch.hpp:12)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (25 samples, 2.36%)</title><rect x="79.8677%" y="228" width="2.3629%" height="15" fill="rgb(228,201,54)" fg:x="845" fg:w="25"/><text x="80.1177%" y="238.50">st..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (25 samples, 2.36%)</title><rect x="79.8677%" y="244" width="2.3629%" height="15" fill="rgb(222,22,37)" fg:x="845" fg:w="25"/><text x="80.1177%" y="254.50">st..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (25 samples, 2.36%)</title><rect x="79.8677%" y="260" width="2.3629%" height="15" fill="rgb(237,53,32)" fg:x="845" fg:w="25"/><text x="80.1177%" y="270.50">st..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (25 samples, 2.36%)</title><rect x="79.8677%" y="276" width="2.3629%" height="15" fill="rgb(233,25,53)" fg:x="845" fg:w="25"/><text x="80.1177%" y="286.50">st..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (25 samples, 2.36%)</title><rect x="79.8677%" y="292" width="2.3629%" height="15" fill="rgb(210,40,34)" fg:x="845" fg:w="25"/><text x="80.1177%" y="302.50">st..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (25 samples, 2.36%)</title><rect x="79.8677%" y="308" width="2.3629%" height="15" fill="rgb(241,220,44)" fg:x="845" fg:w="25"/><text x="80.1177%" y="318.50">st..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (25 samples, 2.36%)</title><rect x="79.8677%" y="324" width="2.3629%" height="15" fill="rgb(235,28,35)" fg:x="845" fg:w="25"/><text x="80.1177%" y="334.50">st..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (25 samples, 2.36%)</title><rect x="79.8677%" y="340" width="2.3629%" height="15" fill="rgb(210,56,17)" fg:x="845" fg:w="25"/><text x="80.1177%" y="350.50">st..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (25 samples, 2.36%)</title><rect x="79.8677%" y="356" width="2.3629%" height="15" fill="rgb(224,130,29)" fg:x="845" fg:w="25"/><text x="80.1177%" y="366.50">0x..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (33 samples, 3.12%)</title><rect x="82.3251%" y="212" width="3.1191%" height="15" fill="rgb(235,212,8)" fg:x="871" fg:w="33"/><text x="82.5751%" y="222.50">std..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (33 samples, 3.12%)</title><rect x="82.3251%" y="228" width="3.1191%" height="15" fill="rgb(223,33,50)" fg:x="871" fg:w="33"/><text x="82.5751%" y="238.50">std..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (33 samples, 3.12%)</title><rect x="82.3251%" y="244" width="3.1191%" height="15" fill="rgb(219,149,13)" fg:x="871" fg:w="33"/><text x="82.5751%" y="254.50">std..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (33 samples, 3.12%)</title><rect x="82.3251%" y="260" width="3.1191%" height="15" fill="rgb(250,156,29)" fg:x="871" fg:w="33"/><text x="82.5751%" y="270.50">std..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (33 samples, 3.12%)</title><rect x="82.3251%" y="276" width="3.1191%" height="15" fill="rgb(216,193,19)" fg:x="871" fg:w="33"/><text x="82.5751%" y="286.50">std..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (33 samples, 3.12%)</title><rect x="82.3251%" y="292" width="3.1191%" height="15" fill="rgb(216,135,14)" fg:x="871" fg:w="33"/><text x="82.5751%" y="302.50">std..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (33 samples, 3.12%)</title><rect x="82.3251%" y="308" width="3.1191%" height="15" fill="rgb(241,47,5)" fg:x="871" fg:w="33"/><text x="82.5751%" y="318.50">std..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (33 samples, 3.12%)</title><rect x="82.3251%" y="324" width="3.1191%" height="15" fill="rgb(233,42,35)" fg:x="871" fg:w="33"/><text x="82.5751%" y="334.50">std..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (33 samples, 3.12%)</title><rect x="82.3251%" y="340" width="3.1191%" height="15" fill="rgb(231,13,6)" fg:x="871" fg:w="33"/><text x="82.5751%" y="350.50">0x7..</text></g><g><title>binsearch (binarysearch.hpp:14) (413 samples, 39.04%)</title><rect x="48.1096%" y="196" width="39.0359%" height="15" fill="rgb(207,181,40)" fg:x="509" fg:w="413"/><text x="48.3596%" y="206.50">binsearch (binarysearch.hpp:14)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:680) (18 samples, 1.70%)</title><rect x="85.4442%" y="212" width="1.7013%" height="15" fill="rgb(254,173,49)" fg:x="904" fg:w="18"/><text x="85.6942%" y="222.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:334) (18 samples, 1.70%)</title><rect x="85.4442%" y="228" width="1.7013%" height="15" fill="rgb(221,1,38)" fg:x="904" fg:w="18"/><text x="85.6942%" y="238.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:352) (18 samples, 1.70%)</title><rect x="85.4442%" y="244" width="1.7013%" height="15" fill="rgb(206,124,46)" fg:x="904" fg:w="18"/><text x="85.6942%" y="254.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:469) (18 samples, 1.70%)</title><rect x="85.4442%" y="260" width="1.7013%" height="15" fill="rgb(249,21,11)" fg:x="904" fg:w="18"/><text x="85.6942%" y="270.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:129) (18 samples, 1.70%)</title><rect x="85.4442%" y="276" width="1.7013%" height="15" fill="rgb(222,201,40)" fg:x="904" fg:w="18"/><text x="85.6942%" y="286.50"></text></g><g><title>0x73ddfc06800d (libc-2.31.so) (18 samples, 1.70%)</title><rect x="85.4442%" y="292" width="1.7013%" height="15" fill="rgb(235,61,29)" fg:x="904" fg:w="18"/><text x="85.6942%" y="302.50"></text></g><g><title>0x73ddfc0677ea (libc-2.31.so) (18 samples, 1.70%)</title><rect x="85.4442%" y="308" width="1.7013%" height="15" fill="rgb(219,207,3)" fg:x="904" fg:w="18"/><text x="85.6942%" y="318.50"></text></g><g><title>__default_morecore (libc-2.31.so) (18 samples, 1.70%)</title><rect x="85.4442%" y="324" width="1.7013%" height="15" fill="rgb(222,56,46)" fg:x="904" fg:w="18"/><text x="85.6942%" y="334.50"></text></g><g><title>sbrk (libc-2.31.so) (18 samples, 1.70%)</title><rect x="85.4442%" y="340" width="1.7013%" height="15" fill="rgb(239,76,54)" fg:x="904" fg:w="18"/><text x="85.6942%" y="350.50"></text></g><g><title>brk (libc-2.31.so) (18 samples, 1.70%)</title><rect x="85.4442%" y="356" width="1.7013%" height="15" fill="rgb(231,124,27)" fg:x="904" fg:w="18"/><text x="85.6942%" y="366.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (434 samples, 41.02%)</title><rect x="48.1096%" y="180" width="41.0208%" height="15" fill="rgb(249,195,6)" fg:x="509" fg:w="434"/><text x="48.3596%" y="190.50">binsearch (binarysearch.hpp:12)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (21 samples, 1.98%)</title><rect x="87.1456%" y="196" width="1.9849%" height="15" fill="rgb(237,174,47)" fg:x="922" fg:w="21"/><text x="87.3956%" y="206.50">s..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (21 samples, 1.98%)</title><rect x="87.1456%" y="212" width="1.9849%" height="15" fill="rgb(206,201,31)" fg:x="922" fg:w="21"/><text x="87.3956%" y="222.50">s..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (21 samples, 1.98%)</title><rect x="87.1456%" y="228" width="1.9849%" height="15" fill="rgb(231,57,52)" fg:x="922" fg:w="21"/><text x="87.3956%" y="238.50">s..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (21 samples, 1.98%)</title><rect x="87.1456%" y="244" width="1.9849%" height="15" fill="rgb(248,177,22)" fg:x="922" fg:w="21"/><text x="87.3956%" y="254.50">s..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (21 samples, 1.98%)</title><rect x="87.1456%" y="260" width="1.9849%" height="15" fill="rgb(215,211,37)" fg:x="922" fg:w="21"/><text x="87.3956%" y="270.50">s..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (21 samples, 1.98%)</title><rect x="87.1456%" y="276" width="1.9849%" height="15" fill="rgb(241,128,51)" fg:x="922" fg:w="21"/><text x="87.3956%" y="286.50">s..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (21 samples, 1.98%)</title><rect x="87.1456%" y="292" width="1.9849%" height="15" fill="rgb(227,165,31)" fg:x="922" fg:w="21"/><text x="87.3956%" y="302.50">s..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (21 samples, 1.98%)</title><rect x="87.1456%" y="308" width="1.9849%" height="15" fill="rgb(228,167,24)" fg:x="922" fg:w="21"/><text x="87.3956%" y="318.50">s..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (21 samples, 1.98%)</title><rect x="87.1456%" y="324" width="1.9849%" height="15" fill="rgb(228,143,12)" fg:x="922" fg:w="21"/><text x="87.3956%" y="334.50">0..</text></g><g><title>binsearch (binarysearch.hpp:14) (460 samples, 43.48%)</title><rect x="48.1096%" y="164" width="43.4783%" height="15" fill="rgb(249,149,8)" fg:x="509" fg:w="460"/><text x="48.3596%" y="174.50">binsearch (binarysearch.hpp:14)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (25 samples, 2.36%)</title><rect x="89.2250%" y="180" width="2.3629%" height="15" fill="rgb(243,35,44)" fg:x="944" fg:w="25"/><text x="89.4750%" y="190.50">st..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (25 samples, 2.36%)</title><rect x="89.2250%" y="196" width="2.3629%" height="15" fill="rgb(246,89,9)" fg:x="944" fg:w="25"/><text x="89.4750%" y="206.50">st..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (25 samples, 2.36%)</title><rect x="89.2250%" y="212" width="2.3629%" height="15" fill="rgb(233,213,13)" fg:x="944" fg:w="25"/><text x="89.4750%" y="222.50">st..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (25 samples, 2.36%)</title><rect x="89.2250%" y="228" width="2.3629%" height="15" fill="rgb(233,141,41)" fg:x="944" fg:w="25"/><text x="89.4750%" y="238.50">st..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (25 samples, 2.36%)</title><rect x="89.2250%" y="244" width="2.3629%" height="15" fill="rgb(239,167,4)" fg:x="944" fg:w="25"/><text x="89.4750%" y="254.50">st..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (25 samples, 2.36%)</title><rect x="89.2250%" y="260" width="2.3629%" height="15" fill="rgb(209,217,16)" fg:x="944" fg:w="25"/><text x="89.4750%" y="270.50">st..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (25 samples, 2.36%)</title><rect x="89.2250%" y="276" width="2.3629%" height="15" fill="rgb(219,88,35)" fg:x="944" fg:w="25"/><text x="89.4750%" y="286.50">st..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (25 samples, 2.36%)</title><rect x="89.2250%" y="292" width="2.3629%" height="15" fill="rgb(220,193,23)" fg:x="944" fg:w="25"/><text x="89.4750%" y="302.50">st..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (25 samples, 2.36%)</title><rect x="89.2250%" y="308" width="2.3629%" height="15" fill="rgb(230,90,52)" fg:x="944" fg:w="25"/><text x="89.4750%" y="318.50">0x..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:552) (2 samples, 0.19%)</title><rect x="91.5879%" y="164" width="0.1890%" height="15" fill="rgb(252,106,19)" fg:x="969" fg:w="2"/><text x="91.8379%" y="174.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (stl_vector.h:302) (2 samples, 0.19%)</title><rect x="91.5879%" y="180" width="0.1890%" height="15" fill="rgb(206,74,20)" fg:x="969" fg:w="2"/><text x="91.8379%" y="190.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (stl_vector.h:358) (2 samples, 0.19%)</title><rect x="91.5879%" y="196" width="0.1890%" height="15" fill="rgb(230,138,44)" fg:x="969" fg:w="2"/><text x="91.8379%" y="206.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (stl_vector.h:343) (2 samples, 0.19%)</title><rect x="91.5879%" y="212" width="0.1890%" height="15" fill="rgb(235,182,43)" fg:x="969" fg:w="2"/><text x="91.8379%" y="222.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::allocate (alloc_traits.h:443) (2 samples, 0.19%)</title><rect x="91.5879%" y="228" width="0.1890%" height="15" fill="rgb(242,16,51)" fg:x="969" fg:w="2"/><text x="91.8379%" y="238.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (new_allocator.h:115) (2 samples, 0.19%)</title><rect x="91.5879%" y="244" width="0.1890%" height="15" fill="rgb(248,9,4)" fg:x="969" fg:w="2"/><text x="91.8379%" y="254.50"></text></g><g><title>operator new (libstdc++.so.6.0.28) (2 samples, 0.19%)</title><rect x="91.5879%" y="260" width="0.1890%" height="15" fill="rgb(210,31,22)" fg:x="969" fg:w="2"/><text x="91.8379%" y="270.50"></text></g><g><title>malloc (libc-2.31.so) (2 samples, 0.19%)</title><rect x="91.5879%" y="276" width="0.1890%" height="15" fill="rgb(239,54,39)" fg:x="969" fg:w="2"/><text x="91.8379%" y="286.50"></text></g><g><title>0x73ddfc069793 (libc-2.31.so) (2 samples, 0.19%)</title><rect x="91.5879%" y="292" width="0.1890%" height="15" fill="rgb(230,99,41)" fg:x="969" fg:w="2"/><text x="91.8379%" y="302.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (33 samples, 3.12%)</title><rect x="91.7769%" y="164" width="3.1191%" height="15" fill="rgb(253,106,12)" fg:x="971" fg:w="33"/><text x="92.0269%" y="174.50">std..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (33 samples, 3.12%)</title><rect x="91.7769%" y="180" width="3.1191%" height="15" fill="rgb(213,46,41)" fg:x="971" fg:w="33"/><text x="92.0269%" y="190.50">std..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (33 samples, 3.12%)</title><rect x="91.7769%" y="196" width="3.1191%" height="15" fill="rgb(215,133,35)" fg:x="971" fg:w="33"/><text x="92.0269%" y="206.50">std..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (33 samples, 3.12%)</title><rect x="91.7769%" y="212" width="3.1191%" height="15" fill="rgb(213,28,5)" fg:x="971" fg:w="33"/><text x="92.0269%" y="222.50">std..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (33 samples, 3.12%)</title><rect x="91.7769%" y="228" width="3.1191%" height="15" fill="rgb(215,77,49)" fg:x="971" fg:w="33"/><text x="92.0269%" y="238.50">std..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (33 samples, 3.12%)</title><rect x="91.7769%" y="244" width="3.1191%" height="15" fill="rgb(248,100,22)" fg:x="971" fg:w="33"/><text x="92.0269%" y="254.50">std..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (33 samples, 3.12%)</title><rect x="91.7769%" y="260" width="3.1191%" height="15" fill="rgb(208,67,9)" fg:x="971" fg:w="33"/><text x="92.0269%" y="270.50">std..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (33 samples, 3.12%)</title><rect x="91.7769%" y="276" width="3.1191%" height="15" fill="rgb(219,133,21)" fg:x="971" fg:w="33"/><text x="92.0269%" y="286.50">std..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (33 samples, 3.12%)</title><rect x="91.7769%" y="292" width="3.1191%" height="15" fill="rgb(246,46,29)" fg:x="971" fg:w="33"/><text x="92.0269%" y="302.50">0x7..</text></g><g><title>binsearch (binarysearch.hpp:12) (507 samples, 47.92%)</title><rect x="48.1096%" y="148" width="47.9206%" height="15" fill="rgb(246,185,52)" fg:x="509" fg:w="507"/><text x="48.3596%" y="158.50">binsearch (binarysearch.hpp:12)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:680) (12 samples, 1.13%)</title><rect x="94.8960%" y="164" width="1.1342%" height="15" fill="rgb(252,136,11)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="174.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:334) (12 samples, 1.13%)</title><rect x="94.8960%" y="180" width="1.1342%" height="15" fill="rgb(219,138,53)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="190.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:352) (12 samples, 1.13%)</title><rect x="94.8960%" y="196" width="1.1342%" height="15" fill="rgb(211,51,23)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="206.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:469) (12 samples, 1.13%)</title><rect x="94.8960%" y="212" width="1.1342%" height="15" fill="rgb(247,221,28)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="222.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:129) (12 samples, 1.13%)</title><rect x="94.8960%" y="228" width="1.1342%" height="15" fill="rgb(251,222,45)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="238.50"></text></g><g><title>0x73ddfc06800d (libc-2.31.so) (12 samples, 1.13%)</title><rect x="94.8960%" y="244" width="1.1342%" height="15" fill="rgb(217,162,53)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="254.50"></text></g><g><title>0x73ddfc0677ea (libc-2.31.so) (12 samples, 1.13%)</title><rect x="94.8960%" y="260" width="1.1342%" height="15" fill="rgb(229,93,14)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="270.50"></text></g><g><title>__default_morecore (libc-2.31.so) (12 samples, 1.13%)</title><rect x="94.8960%" y="276" width="1.1342%" height="15" fill="rgb(209,67,49)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="286.50"></text></g><g><title>sbrk (libc-2.31.so) (12 samples, 1.13%)</title><rect x="94.8960%" y="292" width="1.1342%" height="15" fill="rgb(213,87,29)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="302.50"></text></g><g><title>brk (libc-2.31.so) (12 samples, 1.13%)</title><rect x="94.8960%" y="308" width="1.1342%" height="15" fill="rgb(205,151,52)" fg:x="1004" fg:w="12"/><text x="95.1460%" y="318.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (519 samples, 49.05%)</title><rect x="48.1096%" y="132" width="49.0548%" height="15" fill="rgb(253,215,39)" fg:x="509" fg:w="519"/><text x="48.3596%" y="142.50">binsearch (binarysearch.hpp:14)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (12 samples, 1.13%)</title><rect x="96.0302%" y="148" width="1.1342%" height="15" fill="rgb(221,220,41)" fg:x="1016" fg:w="12"/><text x="96.2802%" y="158.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (12 samples, 1.13%)</title><rect x="96.0302%" y="164" width="1.1342%" height="15" fill="rgb(218,133,21)" fg:x="1016" fg:w="12"/><text x="96.2802%" y="174.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (12 samples, 1.13%)</title><rect x="96.0302%" y="180" width="1.1342%" height="15" fill="rgb(221,193,43)" fg:x="1016" fg:w="12"/><text x="96.2802%" y="190.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (12 samples, 1.13%)</title><rect x="96.0302%" y="196" width="1.1342%" height="15" fill="rgb(240,128,52)" fg:x="1016" fg:w="12"/><text x="96.2802%" y="206.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (12 samples, 1.13%)</title><rect x="96.0302%" y="212" width="1.1342%" height="15" fill="rgb(253,114,12)" fg:x="1016" fg:w="12"/><text x="96.2802%" y="222.50"></text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (12 samples, 1.13%)</title><rect x="96.0302%" y="228" width="1.1342%" height="15" fill="rgb(215,223,47)" fg:x="1016" fg:w="12"/><text x="96.2802%" y="238.50"></text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (12 samples, 1.13%)</title><rect x="96.0302%" y="244" width="1.1342%" height="15" fill="rgb(248,225,23)" fg:x="1016" fg:w="12"/><text x="96.2802%" y="254.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (12 samples, 1.13%)</title><rect x="96.0302%" y="260" width="1.1342%" height="15" fill="rgb(250,108,0)" fg:x="1016" fg:w="12"/><text x="96.2802%" y="270.50"></text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (12 samples, 1.13%)</title><rect x="96.0302%" y="276" width="1.1342%" height="15" fill="rgb(228,208,7)" fg:x="1016" fg:w="12"/><text x="96.2802%" y="286.50"></text></g><g><title>0x73ddfc06800d (libc-2.31.so) (5 samples, 0.47%)</title><rect x="97.2590%" y="244" width="0.4726%" height="15" fill="rgb(244,45,10)" fg:x="1029" fg:w="5"/><text x="97.5090%" y="254.50"></text></g><g><title>0x73ddfc0677ea (libc-2.31.so) (5 samples, 0.47%)</title><rect x="97.2590%" y="260" width="0.4726%" height="15" fill="rgb(207,125,25)" fg:x="1029" fg:w="5"/><text x="97.5090%" y="270.50"></text></g><g><title>__default_morecore (libc-2.31.so) (5 samples, 0.47%)</title><rect x="97.2590%" y="276" width="0.4726%" height="15" fill="rgb(210,195,18)" fg:x="1029" fg:w="5"/><text x="97.5090%" y="286.50"></text></g><g><title>sbrk (libc-2.31.so) (5 samples, 0.47%)</title><rect x="97.2590%" y="292" width="0.4726%" height="15" fill="rgb(249,80,12)" fg:x="1029" fg:w="5"/><text x="97.5090%" y="302.50"></text></g><g><title>brk (libc-2.31.so) (5 samples, 0.47%)</title><rect x="97.2590%" y="308" width="0.4726%" height="15" fill="rgb(221,65,9)" fg:x="1029" fg:w="5"/><text x="97.5090%" y="318.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator= (stl_vector.h:712) (6 samples, 0.57%)</title><rect x="97.2590%" y="132" width="0.5671%" height="15" fill="rgb(235,49,36)" fg:x="1029" fg:w="6"/><text x="97.5090%" y="142.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_move_assign (stl_vector.h:1818) (6 samples, 0.57%)</title><rect x="97.2590%" y="148" width="0.5671%" height="15" fill="rgb(225,32,20)" fg:x="1029" fg:w="6"/><text x="97.5090%" y="158.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:680) (6 samples, 0.57%)</title><rect x="97.2590%" y="164" width="0.5671%" height="15" fill="rgb(215,141,46)" fg:x="1029" fg:w="6"/><text x="97.5090%" y="174.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:334) (6 samples, 0.57%)</title><rect x="97.2590%" y="180" width="0.5671%" height="15" fill="rgb(250,160,47)" fg:x="1029" fg:w="6"/><text x="97.5090%" y="190.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:352) (6 samples, 0.57%)</title><rect x="97.2590%" y="196" width="0.5671%" height="15" fill="rgb(216,222,40)" fg:x="1029" fg:w="6"/><text x="97.5090%" y="206.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:469) (6 samples, 0.57%)</title><rect x="97.2590%" y="212" width="0.5671%" height="15" fill="rgb(234,217,39)" fg:x="1029" fg:w="6"/><text x="97.5090%" y="222.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:129) (6 samples, 0.57%)</title><rect x="97.2590%" y="228" width="0.5671%" height="15" fill="rgb(207,178,40)" fg:x="1029" fg:w="6"/><text x="97.5090%" y="238.50"></text></g><g><title>&lt;module&gt; (binarysearch_native.py:8) (1,055 samples, 99.72%)</title><rect x="0.0000%" y="68" width="99.7164%" height="15" fill="rgb(221,136,13)" fg:x="0" fg:w="1055"/><text x="0.2500%" y="78.50">&lt;module&gt; (binarysearch_native.py:8)</text></g><g><title>benchmark_native_binary_search (_binarysearch.pyx:23) (1,055 samples, 99.72%)</title><rect x="0.0000%" y="84" width="99.7164%" height="15" fill="rgb(249,199,10)" fg:x="0" fg:w="1055"/><text x="0.2500%" y="94.50">benchmark_native_binary_search (_binarysearch.pyx:23)</text></g><g><title>_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:23) (1,055 samples, 99.72%)</title><rect x="0.0000%" y="100" width="99.7164%" height="15" fill="rgb(249,222,13)" fg:x="0" fg:w="1055"/><text x="0.2500%" y="110.50">_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:23)</text></g><g><title>_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:26) (1,055 samples, 99.72%)</title><rect x="0.0000%" y="116" width="99.7164%" height="15" fill="rgb(244,185,38)" fg:x="0" fg:w="1055"/><text x="0.2500%" y="126.50">_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:26)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:554) (20 samples, 1.89%)</title><rect x="97.8261%" y="132" width="1.8904%" height="15" fill="rgb(236,202,9)" fg:x="1035" fg:w="20"/><text x="98.0761%" y="142.50">s..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:307) (20 samples, 1.89%)</title><rect x="97.8261%" y="148" width="1.8904%" height="15" fill="rgb(250,229,37)" fg:x="1035" fg:w="20"/><text x="98.0761%" y="158.50">s..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:141) (20 samples, 1.89%)</title><rect x="97.8261%" y="164" width="1.8904%" height="15" fill="rgb(206,174,23)" fg:x="1035" fg:w="20"/><text x="98.0761%" y="174.50">s..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:101) (20 samples, 1.89%)</title><rect x="97.8261%" y="180" width="1.8904%" height="15" fill="rgb(211,33,43)" fg:x="1035" fg:w="20"/><text x="98.0761%" y="190.50">s..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:475) (20 samples, 1.89%)</title><rect x="97.8261%" y="196" width="1.8904%" height="15" fill="rgb(245,58,50)" fg:x="1035" fg:w="20"/><text x="98.0761%" y="206.50">s..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:440) (20 samples, 1.89%)</title><rect x="97.8261%" y="212" width="1.8904%" height="15" fill="rgb(244,68,36)" fg:x="1035" fg:w="20"/><text x="98.0761%" y="222.50">s..</text></g><g><title>std::__copy_move_a&lt;false, int const*, int*&gt; (stl_algobase.h:405) (20 samples, 1.89%)</title><rect x="97.8261%" y="228" width="1.8904%" height="15" fill="rgb(232,229,15)" fg:x="1035" fg:w="20"/><text x="98.0761%" y="238.50">s..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:387) (20 samples, 1.89%)</title><rect x="97.8261%" y="244" width="1.8904%" height="15" fill="rgb(254,30,23)" fg:x="1035" fg:w="20"/><text x="98.0761%" y="254.50">s..</text></g><g><title>0x73ddfc15c733 (libc-2.31.so) (20 samples, 1.89%)</title><rect x="97.8261%" y="260" width="1.8904%" height="15" fill="rgb(235,160,14)" fg:x="1035" fg:w="20"/><text x="98.0761%" y="270.50">0..</text></g><g><title>all (1,058 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="1058"/><text x="0.2500%" y="62.50"></text></g><g><title>munmap (libc-2.31.so) (2 samples, 0.19%)</title><rect x="99.8110%" y="68" width="0.1890%" height="15" fill="rgb(226,2,50)" fg:x="1056" fg:w="2"/><text x="100.0610%" y="78.50"></text></g></svg></svg>