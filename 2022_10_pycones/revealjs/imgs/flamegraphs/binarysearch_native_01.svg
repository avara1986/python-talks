<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="586" onload="init(evt)" viewBox="0 0 1200 586" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="586" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record --rate 1000 --native -o flamegraphs/binarysearch_native_01.svg -- python binarysearch_native.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="575.00"> </text><svg id="frames" x="10" width="1180" total_samples="1538"><g><title>0x7fd7a0b93df4 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.13%)</title><rect x="9.2978%" y="164" width="0.1300%" height="15" fill="rgb(227,0,7)" fg:x="143" fg:w="2"/><text x="9.5478%" y="174.50"></text></g><g><title>_Py_INCREF (object.h:462) (8 samples, 0.52%)</title><rect x="9.4278%" y="164" width="0.5202%" height="15" fill="rgb(217,0,24)" fg:x="145" fg:w="8"/><text x="9.6778%" y="174.50"></text></g><g><title>_Py_INCREF (object.h:472) (68 samples, 4.42%)</title><rect x="9.9480%" y="164" width="4.4213%" height="15" fill="rgb(221,193,54)" fg:x="153" fg:w="68"/><text x="10.1980%" y="174.50">_Py_I..</text></g><g><title>_Py_INCREF (object.h:474) (4 samples, 0.26%)</title><rect x="14.3693%" y="164" width="0.2601%" height="15" fill="rgb(248,212,6)" fg:x="221" fg:w="4"/><text x="14.6193%" y="174.50"></text></g><g><title>_Py_IS_TYPE (object.h:143) (9 samples, 0.59%)</title><rect x="14.6294%" y="164" width="0.5852%" height="15" fill="rgb(208,68,35)" fg:x="225" fg:w="9"/><text x="14.8794%" y="174.50"></text></g><g><title>_Py_IS_TYPE (object.h:146) (47 samples, 3.06%)</title><rect x="15.2146%" y="164" width="3.0559%" height="15" fill="rgb(232,128,0)" fg:x="234" fg:w="47"/><text x="15.4646%" y="174.50">_Py..</text></g><g><title>_Py_IS_TYPE (object.h:147) (6 samples, 0.39%)</title><rect x="18.2705%" y="164" width="0.3901%" height="15" fill="rgb(207,160,47)" fg:x="281" fg:w="6"/><text x="18.5205%" y="174.50"></text></g><g><title>_Py_XDECREF (object.h:565) (5 samples, 0.33%)</title><rect x="18.6606%" y="164" width="0.3251%" height="15" fill="rgb(228,23,34)" fg:x="287" fg:w="5"/><text x="18.9106%" y="174.50"></text></g><g><title>_Py_XDECREF (object.h:566) (4 samples, 0.26%)</title><rect x="18.9857%" y="164" width="0.2601%" height="15" fill="rgb(218,30,26)" fg:x="292" fg:w="4"/><text x="19.2357%" y="174.50"></text></g><g><title>_Py_XDECREF (object.h:567) (2 samples, 0.13%)</title><rect x="19.2458%" y="164" width="0.1300%" height="15" fill="rgb(220,122,19)" fg:x="296" fg:w="2"/><text x="19.4958%" y="174.50"></text></g><g><title>_Py_DECREF (object.h:482) (11 samples, 0.72%)</title><rect x="19.4408%" y="180" width="0.7152%" height="15" fill="rgb(250,228,42)" fg:x="299" fg:w="11"/><text x="19.6908%" y="190.50"></text></g><g><title>_Py_DECREF (object.h:492) (88 samples, 5.72%)</title><rect x="20.1560%" y="180" width="5.7217%" height="15" fill="rgb(240,193,28)" fg:x="310" fg:w="88"/><text x="20.4060%" y="190.50">_Py_DEC..</text></g><g><title>_Py_XDECREF (object.h:569) (107 samples, 6.96%)</title><rect x="19.3758%" y="164" width="6.9571%" height="15" fill="rgb(216,20,37)" fg:x="298" fg:w="107"/><text x="19.6258%" y="174.50">_Py_XDECR..</text></g><g><title>_Py_DECREF (object.h:503) (7 samples, 0.46%)</title><rect x="25.8778%" y="180" width="0.4551%" height="15" fill="rgb(206,188,39)" fg:x="398" fg:w="7"/><text x="26.1278%" y="190.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (stl_vector.h:1203) (18 samples, 1.17%)</title><rect x="26.3329%" y="164" width="1.1704%" height="15" fill="rgb(217,207,13)" fg:x="405" fg:w="18"/><text x="26.5829%" y="174.50"></text></g><g><title>0x7fd7a0b93de0 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (3 samples, 0.20%)</title><rect x="29.8440%" y="180" width="0.1951%" height="15" fill="rgb(231,73,38)" fg:x="459" fg:w="3"/><text x="30.0940%" y="190.50"></text></g><g><title>0x7fd7a0b94660 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.26%)</title><rect x="30.0390%" y="180" width="0.2601%" height="15" fill="rgb(225,20,46)" fg:x="462" fg:w="4"/><text x="30.2890%" y="190.50"></text></g><g><title>std::move&lt;int&amp;&gt; (move.h:104) (11 samples, 0.72%)</title><rect x="30.2991%" y="180" width="0.7152%" height="15" fill="rgb(210,31,41)" fg:x="466" fg:w="11"/><text x="30.5491%" y="190.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:109) (18 samples, 1.17%)</title><rect x="31.0143%" y="180" width="1.1704%" height="15" fill="rgb(221,200,47)" fg:x="477" fg:w="18"/><text x="31.2643%" y="190.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:112) (12 samples, 0.78%)</title><rect x="32.1847%" y="180" width="0.7802%" height="15" fill="rgb(226,26,5)" fg:x="495" fg:w="12"/><text x="32.4347%" y="190.50"></text></g><g><title>0x7fd7a0b948b4 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (5 samples, 0.33%)</title><rect x="33.6151%" y="196" width="0.3251%" height="15" fill="rgb(249,33,26)" fg:x="517" fg:w="5"/><text x="33.8651%" y="206.50"></text></g><g><title>std::forward&lt;int&gt; (move.h:77) (3 samples, 0.20%)</title><rect x="33.9402%" y="196" width="0.1951%" height="15" fill="rgb(235,183,28)" fg:x="522" fg:w="3"/><text x="34.1902%" y="206.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:115) (26 samples, 1.69%)</title><rect x="32.9649%" y="180" width="1.6905%" height="15" fill="rgb(221,5,38)" fg:x="507" fg:w="26"/><text x="33.2149%" y="190.50"></text></g><g><title>std::forward&lt;int&gt; (move.h:78) (8 samples, 0.52%)</title><rect x="34.1352%" y="196" width="0.5202%" height="15" fill="rgb(247,18,42)" fg:x="525" fg:w="8"/><text x="34.3852%" y="206.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int&gt; (alloc_traits.h:511) (21 samples, 1.37%)</title><rect x="35.3706%" y="196" width="1.3654%" height="15" fill="rgb(241,131,45)" fg:x="544" fg:w="21"/><text x="35.6206%" y="206.50"></text></g><g><title>std::forward&lt;int&gt; (move.h:77) (5 samples, 0.33%)</title><rect x="37.5813%" y="212" width="0.3251%" height="15" fill="rgb(249,31,29)" fg:x="578" fg:w="5"/><text x="37.8313%" y="222.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int&gt; (alloc_traits.h:516) (19 samples, 1.24%)</title><rect x="36.7360%" y="196" width="1.2354%" height="15" fill="rgb(225,111,53)" fg:x="565" fg:w="19"/><text x="36.9860%" y="206.50"></text></g><g><title>0x7fd7a0b94264 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (5 samples, 0.33%)</title><rect x="37.9714%" y="212" width="0.3251%" height="15" fill="rgb(238,160,17)" fg:x="584" fg:w="5"/><text x="38.2214%" y="222.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int&gt; (new_allocator.h:160) (13 samples, 0.85%)</title><rect x="38.2965%" y="212" width="0.8453%" height="15" fill="rgb(214,148,48)" fg:x="589" fg:w="13"/><text x="38.5465%" y="222.50"></text></g><g><title>0x7fd7a0b948b0 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (5 samples, 0.33%)</title><rect x="41.8075%" y="228" width="0.3251%" height="15" fill="rgb(232,36,49)" fg:x="643" fg:w="5"/><text x="42.0575%" y="238.50"></text></g><g><title>operator new (new:175) (25 samples, 1.63%)</title><rect x="42.1326%" y="228" width="1.6255%" height="15" fill="rgb(209,103,24)" fg:x="648" fg:w="25"/><text x="42.3826%" y="238.50"></text></g><g><title>std::forward&lt;int&gt; (move.h:77) (10 samples, 0.65%)</title><rect x="43.7581%" y="228" width="0.6502%" height="15" fill="rgb(229,88,8)" fg:x="673" fg:w="10"/><text x="44.0081%" y="238.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:117) (151 samples, 9.82%)</title><rect x="34.6554%" y="180" width="9.8179%" height="15" fill="rgb(213,181,19)" fg:x="533" fg:w="151"/><text x="34.9054%" y="190.50">std::vector&lt;in..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::construct&lt;int, int&gt; (alloc_traits.h:520) (100 samples, 6.50%)</title><rect x="37.9714%" y="196" width="6.5020%" height="15" fill="rgb(254,191,54)" fg:x="584" fg:w="100"/><text x="38.2214%" y="206.50">std::allo..</text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::construct&lt;int, int&gt; (new_allocator.h:162) (82 samples, 5.33%)</title><rect x="39.1417%" y="212" width="5.3316%" height="15" fill="rgb(241,83,37)" fg:x="602" fg:w="82"/><text x="39.3917%" y="222.50">__gnu_c..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (vector.tcc:440) (3 samples, 0.20%)</title><rect x="44.7984%" y="196" width="0.1951%" height="15" fill="rgb(233,36,39)" fg:x="689" fg:w="3"/><text x="45.0484%" y="206.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (stl_vector.h:346) (3 samples, 0.20%)</title><rect x="44.7984%" y="212" width="0.1951%" height="15" fill="rgb(226,3,54)" fg:x="689" fg:w="3"/><text x="45.0484%" y="222.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::allocate (alloc_traits.h:464) (3 samples, 0.20%)</title><rect x="44.7984%" y="228" width="0.1951%" height="15" fill="rgb(245,192,40)" fg:x="689" fg:w="3"/><text x="45.0484%" y="238.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (new_allocator.h:127) (2 samples, 0.13%)</title><rect x="44.8635%" y="244" width="0.1300%" height="15" fill="rgb(238,167,29)" fg:x="690" fg:w="2"/><text x="45.1135%" y="254.50"></text></g><g><title>operator new (libstdc++.so.6.0.30) (2 samples, 0.13%)</title><rect x="44.8635%" y="260" width="0.1300%" height="15" fill="rgb(232,182,51)" fg:x="690" fg:w="2"/><text x="45.1135%" y="270.50"></text></g><g><title>0x7fd7a1756be4 (libc.so.6) (13 samples, 0.85%)</title><rect x="44.9935%" y="276" width="0.8453%" height="15" fill="rgb(231,60,39)" fg:x="692" fg:w="13"/><text x="45.2435%" y="286.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:123) (23 samples, 1.50%)</title><rect x="44.4733%" y="180" width="1.4954%" height="15" fill="rgb(208,69,12)" fg:x="684" fg:w="23"/><text x="44.7233%" y="190.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_realloc_insert&lt;int&gt; (vector.tcc:461) (15 samples, 0.98%)</title><rect x="44.9935%" y="196" width="0.9753%" height="15" fill="rgb(235,93,37)" fg:x="692" fg:w="15"/><text x="45.2435%" y="206.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_relocate (stl_vector.h:470) (15 samples, 0.98%)</title><rect x="44.9935%" y="212" width="0.9753%" height="15" fill="rgb(213,116,39)" fg:x="692" fg:w="15"/><text x="45.2435%" y="222.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_S_do_relocate (stl_vector.h:457) (15 samples, 0.98%)</title><rect x="44.9935%" y="228" width="0.9753%" height="15" fill="rgb(222,207,29)" fg:x="692" fg:w="15"/><text x="45.2435%" y="238.50"></text></g><g><title>std::__relocate_a&lt;int*, int*, std::allocator&lt;int&gt; &gt; (stl_uninitialized.h:1049) (15 samples, 0.98%)</title><rect x="44.9935%" y="244" width="0.9753%" height="15" fill="rgb(206,96,30)" fg:x="692" fg:w="15"/><text x="45.2435%" y="254.50"></text></g><g><title>std::__relocate_a_1&lt;int, int&gt; (stl_uninitialized.h:1012) (15 samples, 0.98%)</title><rect x="44.9935%" y="260" width="0.9753%" height="15" fill="rgb(218,138,4)" fg:x="692" fg:w="15"/><text x="45.2435%" y="270.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (2 samples, 0.13%)</title><rect x="45.8388%" y="276" width="0.1300%" height="15" fill="rgb(250,191,14)" fg:x="705" fg:w="2"/><text x="46.0888%" y="286.50"></text></g><g><title>0x7fd7a0b946c0 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (7 samples, 0.46%)</title><rect x="47.8544%" y="196" width="0.4551%" height="15" fill="rgb(239,60,40)" fg:x="736" fg:w="7"/><text x="48.1044%" y="206.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (stl_vector.h:1143) (16 samples, 1.04%)</title><rect x="48.3095%" y="196" width="1.0403%" height="15" fill="rgb(206,27,48)" fg:x="743" fg:w="16"/><text x="48.5595%" y="206.50"></text></g><g><title>0x7fd7a0b94710 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (4 samples, 0.26%)</title><rect x="51.0403%" y="212" width="0.2601%" height="15" fill="rgb(225,35,8)" fg:x="785" fg:w="4"/><text x="51.2903%" y="222.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator- (stl_iterator.h:1083) (7 samples, 0.46%)</title><rect x="51.3004%" y="212" width="0.4551%" height="15" fill="rgb(250,213,24)" fg:x="789" fg:w="7"/><text x="51.5504%" y="222.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (stl_iterator.h:1010) (5 samples, 0.33%)</title><rect x="55.2016%" y="228" width="0.3251%" height="15" fill="rgb(247,123,22)" fg:x="849" fg:w="5"/><text x="55.4516%" y="238.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator- (stl_iterator.h:1084) (79 samples, 5.14%)</title><rect x="51.7555%" y="212" width="5.1365%" height="15" fill="rgb(231,138,38)" fg:x="796" fg:w="79"/><text x="52.0055%" y="222.50">__gnu_..</text></g><g><title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (stl_iterator.h:1011) (21 samples, 1.37%)</title><rect x="55.5267%" y="228" width="1.3654%" height="15" fill="rgb(231,145,46)" fg:x="854" fg:w="21"/><text x="55.7767%" y="238.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (stl_vector.h:829) (11 samples, 0.72%)</title><rect x="56.8921%" y="212" width="0.7152%" height="15" fill="rgb(251,118,11)" fg:x="875" fg:w="11"/><text x="57.1421%" y="222.50"></text></g><g><title>0x7fd7a0b94550 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (2 samples, 0.13%)</title><rect x="59.0377%" y="228" width="0.1300%" height="15" fill="rgb(217,147,25)" fg:x="908" fg:w="2"/><text x="59.2877%" y="238.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (stl_iterator.h:1010) (7 samples, 0.46%)</title><rect x="59.1678%" y="228" width="0.4551%" height="15" fill="rgb(247,81,37)" fg:x="910" fg:w="7"/><text x="59.4178%" y="238.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (stl_vector.h:1146) (173 samples, 11.25%)</title><rect x="49.3498%" y="196" width="11.2484%" height="15" fill="rgb(209,12,38)" fg:x="759" fg:w="173"/><text x="49.5998%" y="206.50">std::vector&lt;int, ..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::end (stl_vector.h:830) (46 samples, 2.99%)</title><rect x="57.6073%" y="212" width="2.9909%" height="15" fill="rgb(227,1,9)" fg:x="886" fg:w="46"/><text x="57.8573%" y="222.50">std..</text></g><g><title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::__normal_iterator (stl_iterator.h:1011) (15 samples, 0.98%)</title><rect x="59.6229%" y="228" width="0.9753%" height="15" fill="rgb(248,47,43)" fg:x="917" fg:w="15"/><text x="59.8729%" y="238.50"></text></g><g><title>0x7fd7a0b94520 (_binarysearch.cpython-310-x86_64-linux-gnu.so) (7 samples, 0.46%)</title><rect x="61.0533%" y="212" width="0.4551%" height="15" fill="rgb(221,10,30)" fg:x="939" fg:w="7"/><text x="61.3033%" y="222.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (stl_iterator.h:1025) (6 samples, 0.39%)</title><rect x="61.5085%" y="212" width="0.3901%" height="15" fill="rgb(210,229,1)" fg:x="946" fg:w="6"/><text x="61.7585%" y="222.50"></text></g><g><title>__pyx_convert_vector_from_py_int (vector.from_py:47) (972 samples, 63.20%)</title><rect x="0.0000%" y="148" width="63.1990%" height="15" fill="rgb(222,148,37)" fg:x="0" fg:w="972"/><text x="0.2500%" y="158.50">__pyx_convert_vector_from_py_int (vector.from_py:47)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (stl_vector.h:1204) (549 samples, 35.70%)</title><rect x="27.5033%" y="164" width="35.6957%" height="15" fill="rgb(234,67,33)" fg:x="423" fg:w="549"/><text x="27.7533%" y="174.50">std::vector&lt;int, std::allocator&lt;int&gt; &gt;::push_back (stl_vec..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::emplace_back&lt;int&gt; (vector.tcc:125) (265 samples, 17.23%)</title><rect x="45.9688%" y="180" width="17.2302%" height="15" fill="rgb(247,98,35)" fg:x="707" fg:w="265"/><text x="46.2188%" y="190.50">std::vector&lt;int, std::alloc..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::back (stl_vector.h:1147) (40 samples, 2.60%)</title><rect x="60.5982%" y="196" width="2.6008%" height="15" fill="rgb(247,138,52)" fg:x="932" fg:w="40"/><text x="60.8482%" y="206.50">st..</text></g><g><title>__gnu_cxx::__normal_iterator&lt;int*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;::operator* (stl_iterator.h:1026) (20 samples, 1.30%)</title><rect x="61.8986%" y="212" width="1.3004%" height="15" fill="rgb(213,79,30)" fg:x="952" fg:w="20"/><text x="62.1486%" y="222.50"></text></g><g><title>PyType_HasFeature (object.h:723) (7 samples, 0.46%)</title><rect x="71.1313%" y="180" width="0.4551%" height="15" fill="rgb(246,177,23)" fg:x="1094" fg:w="7"/><text x="71.3813%" y="190.50"></text></g><g><title>PyType_HasFeature (object.h:729) (3 samples, 0.20%)</title><rect x="71.5865%" y="180" width="0.1951%" height="15" fill="rgb(230,62,27)" fg:x="1101" fg:w="3"/><text x="71.8365%" y="190.50"></text></g><g><title>__pyx_convert_vector_from_py_int (vector.from_py:48) (139 samples, 9.04%)</title><rect x="63.1990%" y="148" width="9.0377%" height="15" fill="rgb(216,154,8)" fg:x="972" fg:w="139"/><text x="63.4490%" y="158.50">__pyx_convert..</text></g><g><title>__Pyx_PyInt_As_int (vector.from_py:45) (108 samples, 7.02%)</title><rect x="65.2146%" y="164" width="7.0221%" height="15" fill="rgb(244,35,45)" fg:x="1003" fg:w="108"/><text x="65.4646%" y="174.50">__Pyx_PyI..</text></g><g><title>PyType_HasFeature (object.h:731) (7 samples, 0.46%)</title><rect x="71.7815%" y="180" width="0.4551%" height="15" fill="rgb(251,115,12)" fg:x="1104" fg:w="7"/><text x="72.0315%" y="190.50"></text></g><g><title>__pyx_convert_vector_from_py_int (vector.from_py:49) (5 samples, 0.33%)</title><rect x="72.2367%" y="148" width="0.3251%" height="15" fill="rgb(240,54,50)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="158.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator= (vector.tcc:226) (5 samples, 0.33%)</title><rect x="72.2367%" y="164" width="0.3251%" height="15" fill="rgb(233,84,52)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="174.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate_and_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt; &gt; (stl_vector.h:1516) (5 samples, 0.33%)</title><rect x="72.2367%" y="180" width="0.3251%" height="15" fill="rgb(207,117,47)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="190.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (5 samples, 0.33%)</title><rect x="72.2367%" y="196" width="0.3251%" height="15" fill="rgb(249,43,39)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="206.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (5 samples, 0.33%)</title><rect x="72.2367%" y="212" width="0.3251%" height="15" fill="rgb(209,38,44)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="222.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (5 samples, 0.33%)</title><rect x="72.2367%" y="228" width="0.3251%" height="15" fill="rgb(236,212,23)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="238.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (5 samples, 0.33%)</title><rect x="72.2367%" y="244" width="0.3251%" height="15" fill="rgb(242,79,21)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="254.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (5 samples, 0.33%)</title><rect x="72.2367%" y="260" width="0.3251%" height="15" fill="rgb(211,96,35)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="270.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (5 samples, 0.33%)</title><rect x="72.2367%" y="276" width="0.3251%" height="15" fill="rgb(253,215,40)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="286.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (5 samples, 0.33%)</title><rect x="72.2367%" y="292" width="0.3251%" height="15" fill="rgb(211,81,21)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="302.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (5 samples, 0.33%)</title><rect x="72.2367%" y="308" width="0.3251%" height="15" fill="rgb(208,190,38)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="318.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (5 samples, 0.33%)</title><rect x="72.2367%" y="324" width="0.3251%" height="15" fill="rgb(235,213,38)" fg:x="1111" fg:w="5"/><text x="72.4867%" y="334.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (14 samples, 0.91%)</title><rect x="72.5618%" y="388" width="0.9103%" height="15" fill="rgb(237,122,38)" fg:x="1116" fg:w="14"/><text x="72.8118%" y="398.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (14 samples, 0.91%)</title><rect x="72.5618%" y="404" width="0.9103%" height="15" fill="rgb(244,218,35)" fg:x="1116" fg:w="14"/><text x="72.8118%" y="414.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (13 samples, 0.85%)</title><rect x="72.6268%" y="420" width="0.8453%" height="15" fill="rgb(240,68,47)" fg:x="1117" fg:w="13"/><text x="72.8768%" y="430.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (13 samples, 0.85%)</title><rect x="72.6268%" y="436" width="0.8453%" height="15" fill="rgb(210,16,53)" fg:x="1117" fg:w="13"/><text x="72.8768%" y="446.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (13 samples, 0.85%)</title><rect x="72.6268%" y="452" width="0.8453%" height="15" fill="rgb(235,124,12)" fg:x="1117" fg:w="13"/><text x="72.8768%" y="462.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (13 samples, 0.85%)</title><rect x="72.6268%" y="468" width="0.8453%" height="15" fill="rgb(224,169,11)" fg:x="1117" fg:w="13"/><text x="72.8768%" y="478.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (13 samples, 0.85%)</title><rect x="72.6268%" y="484" width="0.8453%" height="15" fill="rgb(250,166,2)" fg:x="1117" fg:w="13"/><text x="72.8768%" y="494.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (13 samples, 0.85%)</title><rect x="72.6268%" y="500" width="0.8453%" height="15" fill="rgb(242,216,29)" fg:x="1117" fg:w="13"/><text x="72.8768%" y="510.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (13 samples, 0.85%)</title><rect x="72.6268%" y="516" width="0.8453%" height="15" fill="rgb(230,116,27)" fg:x="1117" fg:w="13"/><text x="72.8768%" y="526.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (13 samples, 0.85%)</title><rect x="72.6268%" y="532" width="0.8453%" height="15" fill="rgb(228,99,48)" fg:x="1117" fg:w="13"/><text x="72.8768%" y="542.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (13 samples, 0.85%)</title><rect x="72.6268%" y="548" width="0.8453%" height="15" fill="rgb(253,11,6)" fg:x="1117" fg:w="13"/><text x="72.8768%" y="558.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (33 samples, 2.15%)</title><rect x="72.5618%" y="372" width="2.1456%" height="15" fill="rgb(247,143,39)" fg:x="1116" fg:w="33"/><text x="72.8118%" y="382.50">b..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (19 samples, 1.24%)</title><rect x="73.4720%" y="388" width="1.2354%" height="15" fill="rgb(236,97,10)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="398.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (19 samples, 1.24%)</title><rect x="73.4720%" y="404" width="1.2354%" height="15" fill="rgb(233,208,19)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="414.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (19 samples, 1.24%)</title><rect x="73.4720%" y="420" width="1.2354%" height="15" fill="rgb(216,164,2)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="430.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (19 samples, 1.24%)</title><rect x="73.4720%" y="436" width="1.2354%" height="15" fill="rgb(220,129,5)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="446.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (19 samples, 1.24%)</title><rect x="73.4720%" y="452" width="1.2354%" height="15" fill="rgb(242,17,10)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="462.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (19 samples, 1.24%)</title><rect x="73.4720%" y="468" width="1.2354%" height="15" fill="rgb(242,107,0)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="478.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (19 samples, 1.24%)</title><rect x="73.4720%" y="484" width="1.2354%" height="15" fill="rgb(251,28,31)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="494.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (19 samples, 1.24%)</title><rect x="73.4720%" y="500" width="1.2354%" height="15" fill="rgb(233,223,10)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="510.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (19 samples, 1.24%)</title><rect x="73.4720%" y="516" width="1.2354%" height="15" fill="rgb(215,21,27)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="526.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (19 samples, 1.24%)</title><rect x="73.4720%" y="532" width="1.2354%" height="15" fill="rgb(232,23,21)" fg:x="1130" fg:w="19"/><text x="73.7220%" y="542.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (34 samples, 2.21%)</title><rect x="74.7724%" y="372" width="2.2107%" height="15" fill="rgb(244,5,23)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="382.50">s..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (34 samples, 2.21%)</title><rect x="74.7724%" y="388" width="2.2107%" height="15" fill="rgb(226,81,46)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="398.50">s..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (34 samples, 2.21%)</title><rect x="74.7724%" y="404" width="2.2107%" height="15" fill="rgb(247,70,30)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="414.50">s..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (34 samples, 2.21%)</title><rect x="74.7724%" y="420" width="2.2107%" height="15" fill="rgb(212,68,19)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="430.50">s..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (34 samples, 2.21%)</title><rect x="74.7724%" y="436" width="2.2107%" height="15" fill="rgb(240,187,13)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="446.50">s..</text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (34 samples, 2.21%)</title><rect x="74.7724%" y="452" width="2.2107%" height="15" fill="rgb(223,113,26)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="462.50">s..</text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (34 samples, 2.21%)</title><rect x="74.7724%" y="468" width="2.2107%" height="15" fill="rgb(206,192,2)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="478.50">s..</text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (34 samples, 2.21%)</title><rect x="74.7724%" y="484" width="2.2107%" height="15" fill="rgb(241,108,4)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="494.50">s..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (34 samples, 2.21%)</title><rect x="74.7724%" y="500" width="2.2107%" height="15" fill="rgb(247,173,49)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="510.50">s..</text></g><g><title>0x7fd7a1756c4a (libc.so.6) (34 samples, 2.21%)</title><rect x="74.7724%" y="516" width="2.2107%" height="15" fill="rgb(224,114,35)" fg:x="1150" fg:w="34"/><text x="75.0224%" y="526.50">0..</text></g><g><title>binsearch (binarysearch.hpp:12) (77 samples, 5.01%)</title><rect x="72.5618%" y="356" width="5.0065%" height="15" fill="rgb(245,159,27)" fg:x="1116" fg:w="77"/><text x="72.8118%" y="366.50">binsea..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:683) (9 samples, 0.59%)</title><rect x="76.9831%" y="372" width="0.5852%" height="15" fill="rgb(245,172,44)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="382.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:337) (9 samples, 0.59%)</title><rect x="76.9831%" y="388" width="0.5852%" height="15" fill="rgb(236,23,11)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="398.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:355) (9 samples, 0.59%)</title><rect x="76.9831%" y="404" width="0.5852%" height="15" fill="rgb(205,117,38)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="414.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:496) (9 samples, 0.59%)</title><rect x="76.9831%" y="420" width="0.5852%" height="15" fill="rgb(237,72,25)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="430.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:150) (9 samples, 0.59%)</title><rect x="76.9831%" y="436" width="0.5852%" height="15" fill="rgb(244,70,9)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="446.50"></text></g><g><title>free (libc.so.6) (9 samples, 0.59%)</title><rect x="76.9831%" y="452" width="0.5852%" height="15" fill="rgb(217,125,39)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="462.50"></text></g><g><title>0x7fd7a1658f49 (libc.so.6) (9 samples, 0.59%)</title><rect x="76.9831%" y="468" width="0.5852%" height="15" fill="rgb(235,36,10)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="478.50"></text></g><g><title>0x7fd7a16586e4 (libc.so.6) (9 samples, 0.59%)</title><rect x="76.9831%" y="484" width="0.5852%" height="15" fill="rgb(251,123,47)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="494.50"></text></g><g><title>__default_morecore (libc.so.6) (9 samples, 0.59%)</title><rect x="76.9831%" y="500" width="0.5852%" height="15" fill="rgb(221,13,13)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="510.50"></text></g><g><title>sbrk (libc.so.6) (9 samples, 0.59%)</title><rect x="76.9831%" y="516" width="0.5852%" height="15" fill="rgb(238,131,9)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="526.50"></text></g><g><title>brk (libc.so.6) (9 samples, 0.59%)</title><rect x="76.9831%" y="532" width="0.5852%" height="15" fill="rgb(211,50,8)" fg:x="1184" fg:w="9"/><text x="77.2331%" y="542.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (97 samples, 6.31%)</title><rect x="72.5618%" y="340" width="6.3069%" height="15" fill="rgb(245,182,24)" fg:x="1116" fg:w="97"/><text x="72.8118%" y="350.50">binsearc..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (19 samples, 1.24%)</title><rect x="77.6333%" y="356" width="1.2354%" height="15" fill="rgb(242,14,37)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="366.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (19 samples, 1.24%)</title><rect x="77.6333%" y="372" width="1.2354%" height="15" fill="rgb(246,228,12)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="382.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (19 samples, 1.24%)</title><rect x="77.6333%" y="388" width="1.2354%" height="15" fill="rgb(213,55,15)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="398.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (19 samples, 1.24%)</title><rect x="77.6333%" y="404" width="1.2354%" height="15" fill="rgb(209,9,3)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="414.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (19 samples, 1.24%)</title><rect x="77.6333%" y="420" width="1.2354%" height="15" fill="rgb(230,59,30)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="430.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (19 samples, 1.24%)</title><rect x="77.6333%" y="436" width="1.2354%" height="15" fill="rgb(209,121,21)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="446.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (19 samples, 1.24%)</title><rect x="77.6333%" y="452" width="1.2354%" height="15" fill="rgb(220,109,13)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="462.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (19 samples, 1.24%)</title><rect x="77.6333%" y="468" width="1.2354%" height="15" fill="rgb(232,18,1)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="478.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (19 samples, 1.24%)</title><rect x="77.6333%" y="484" width="1.2354%" height="15" fill="rgb(215,41,42)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="494.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (19 samples, 1.24%)</title><rect x="77.6333%" y="500" width="1.2354%" height="15" fill="rgb(224,123,36)" fg:x="1194" fg:w="19"/><text x="77.8833%" y="510.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (130 samples, 8.45%)</title><rect x="72.5618%" y="324" width="8.4525%" height="15" fill="rgb(240,125,3)" fg:x="1116" fg:w="130"/><text x="72.8118%" y="334.50">binsearch (b..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (33 samples, 2.15%)</title><rect x="78.8687%" y="340" width="2.1456%" height="15" fill="rgb(205,98,50)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="350.50">s..</text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (33 samples, 2.15%)</title><rect x="78.8687%" y="356" width="2.1456%" height="15" fill="rgb(205,185,37)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="366.50">s..</text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (33 samples, 2.15%)</title><rect x="78.8687%" y="372" width="2.1456%" height="15" fill="rgb(238,207,15)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="382.50">s..</text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (33 samples, 2.15%)</title><rect x="78.8687%" y="388" width="2.1456%" height="15" fill="rgb(213,199,42)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="398.50">s..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (33 samples, 2.15%)</title><rect x="78.8687%" y="404" width="2.1456%" height="15" fill="rgb(235,201,11)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="414.50">s..</text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (33 samples, 2.15%)</title><rect x="78.8687%" y="420" width="2.1456%" height="15" fill="rgb(207,46,11)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="430.50">s..</text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (33 samples, 2.15%)</title><rect x="78.8687%" y="436" width="2.1456%" height="15" fill="rgb(241,35,35)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="446.50">s..</text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (33 samples, 2.15%)</title><rect x="78.8687%" y="452" width="2.1456%" height="15" fill="rgb(243,32,47)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="462.50">s..</text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (33 samples, 2.15%)</title><rect x="78.8687%" y="468" width="2.1456%" height="15" fill="rgb(247,202,23)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="478.50">s..</text></g><g><title>0x7fd7a1756c4a (libc.so.6) (33 samples, 2.15%)</title><rect x="78.8687%" y="484" width="2.1456%" height="15" fill="rgb(219,102,11)" fg:x="1213" fg:w="33"/><text x="79.1187%" y="494.50">0..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (19 samples, 1.24%)</title><rect x="81.0143%" y="324" width="1.2354%" height="15" fill="rgb(243,110,44)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="334.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (19 samples, 1.24%)</title><rect x="81.0143%" y="340" width="1.2354%" height="15" fill="rgb(222,74,54)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="350.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (19 samples, 1.24%)</title><rect x="81.0143%" y="356" width="1.2354%" height="15" fill="rgb(216,99,12)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="366.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (19 samples, 1.24%)</title><rect x="81.0143%" y="372" width="1.2354%" height="15" fill="rgb(226,22,26)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="382.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (19 samples, 1.24%)</title><rect x="81.0143%" y="388" width="1.2354%" height="15" fill="rgb(217,163,10)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="398.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (19 samples, 1.24%)</title><rect x="81.0143%" y="404" width="1.2354%" height="15" fill="rgb(213,25,53)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="414.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (19 samples, 1.24%)</title><rect x="81.0143%" y="420" width="1.2354%" height="15" fill="rgb(252,105,26)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="430.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (19 samples, 1.24%)</title><rect x="81.0143%" y="436" width="1.2354%" height="15" fill="rgb(220,39,43)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="446.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (19 samples, 1.24%)</title><rect x="81.0143%" y="452" width="1.2354%" height="15" fill="rgb(229,68,48)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="462.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (19 samples, 1.24%)</title><rect x="81.0143%" y="468" width="1.2354%" height="15" fill="rgb(252,8,32)" fg:x="1246" fg:w="19"/><text x="81.2643%" y="478.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (151 samples, 9.82%)</title><rect x="72.5618%" y="308" width="9.8179%" height="15" fill="rgb(223,20,43)" fg:x="1116" fg:w="151"/><text x="72.8118%" y="318.50">binsearch (bin..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:683) (2 samples, 0.13%)</title><rect x="82.2497%" y="324" width="0.1300%" height="15" fill="rgb(229,81,49)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="334.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:337) (2 samples, 0.13%)</title><rect x="82.2497%" y="340" width="0.1300%" height="15" fill="rgb(236,28,36)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="350.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:355) (2 samples, 0.13%)</title><rect x="82.2497%" y="356" width="0.1300%" height="15" fill="rgb(249,185,26)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="366.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:496) (2 samples, 0.13%)</title><rect x="82.2497%" y="372" width="0.1300%" height="15" fill="rgb(249,174,33)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="382.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:150) (2 samples, 0.13%)</title><rect x="82.2497%" y="388" width="0.1300%" height="15" fill="rgb(233,201,37)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="398.50"></text></g><g><title>free (libc.so.6) (2 samples, 0.13%)</title><rect x="82.2497%" y="404" width="0.1300%" height="15" fill="rgb(221,78,26)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="414.50"></text></g><g><title>0x7fd7a1658f49 (libc.so.6) (2 samples, 0.13%)</title><rect x="82.2497%" y="420" width="0.1300%" height="15" fill="rgb(250,127,30)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="430.50"></text></g><g><title>0x7fd7a16586e4 (libc.so.6) (2 samples, 0.13%)</title><rect x="82.2497%" y="436" width="0.1300%" height="15" fill="rgb(230,49,44)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="446.50"></text></g><g><title>__default_morecore (libc.so.6) (2 samples, 0.13%)</title><rect x="82.2497%" y="452" width="0.1300%" height="15" fill="rgb(229,67,23)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="462.50"></text></g><g><title>sbrk (libc.so.6) (2 samples, 0.13%)</title><rect x="82.2497%" y="468" width="0.1300%" height="15" fill="rgb(249,83,47)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="478.50"></text></g><g><title>brk (libc.so.6) (2 samples, 0.13%)</title><rect x="82.2497%" y="484" width="0.1300%" height="15" fill="rgb(215,43,3)" fg:x="1265" fg:w="2"/><text x="82.4997%" y="494.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (168 samples, 10.92%)</title><rect x="72.5618%" y="292" width="10.9233%" height="15" fill="rgb(238,154,13)" fg:x="1116" fg:w="168"/><text x="72.8118%" y="302.50">binsearch (binar..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (17 samples, 1.11%)</title><rect x="82.3797%" y="308" width="1.1053%" height="15" fill="rgb(219,56,2)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="318.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (17 samples, 1.11%)</title><rect x="82.3797%" y="324" width="1.1053%" height="15" fill="rgb(233,0,4)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="334.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (17 samples, 1.11%)</title><rect x="82.3797%" y="340" width="1.1053%" height="15" fill="rgb(235,30,7)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="350.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (17 samples, 1.11%)</title><rect x="82.3797%" y="356" width="1.1053%" height="15" fill="rgb(250,79,13)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="366.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (17 samples, 1.11%)</title><rect x="82.3797%" y="372" width="1.1053%" height="15" fill="rgb(211,146,34)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="382.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (17 samples, 1.11%)</title><rect x="82.3797%" y="388" width="1.1053%" height="15" fill="rgb(228,22,38)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="398.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (17 samples, 1.11%)</title><rect x="82.3797%" y="404" width="1.1053%" height="15" fill="rgb(235,168,5)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="414.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (17 samples, 1.11%)</title><rect x="82.3797%" y="420" width="1.1053%" height="15" fill="rgb(221,155,16)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="430.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (17 samples, 1.11%)</title><rect x="82.3797%" y="436" width="1.1053%" height="15" fill="rgb(215,215,53)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="446.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (17 samples, 1.11%)</title><rect x="82.3797%" y="452" width="1.1053%" height="15" fill="rgb(223,4,10)" fg:x="1267" fg:w="17"/><text x="82.6297%" y="462.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (188 samples, 12.22%)</title><rect x="72.5618%" y="276" width="12.2237%" height="15" fill="rgb(234,103,6)" fg:x="1116" fg:w="188"/><text x="72.8118%" y="286.50">binsearch (binarys..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (20 samples, 1.30%)</title><rect x="83.4850%" y="292" width="1.3004%" height="15" fill="rgb(227,97,0)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="302.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (20 samples, 1.30%)</title><rect x="83.4850%" y="308" width="1.3004%" height="15" fill="rgb(234,150,53)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="318.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (20 samples, 1.30%)</title><rect x="83.4850%" y="324" width="1.3004%" height="15" fill="rgb(228,201,54)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="334.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (20 samples, 1.30%)</title><rect x="83.4850%" y="340" width="1.3004%" height="15" fill="rgb(222,22,37)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="350.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (20 samples, 1.30%)</title><rect x="83.4850%" y="356" width="1.3004%" height="15" fill="rgb(237,53,32)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="366.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (20 samples, 1.30%)</title><rect x="83.4850%" y="372" width="1.3004%" height="15" fill="rgb(233,25,53)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="382.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (20 samples, 1.30%)</title><rect x="83.4850%" y="388" width="1.3004%" height="15" fill="rgb(210,40,34)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="398.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (20 samples, 1.30%)</title><rect x="83.4850%" y="404" width="1.3004%" height="15" fill="rgb(241,220,44)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="414.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (20 samples, 1.30%)</title><rect x="83.4850%" y="420" width="1.3004%" height="15" fill="rgb(235,28,35)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="430.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (20 samples, 1.30%)</title><rect x="83.4850%" y="436" width="1.3004%" height="15" fill="rgb(210,56,17)" fg:x="1284" fg:w="20"/><text x="83.7350%" y="446.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:555) (2 samples, 0.13%)</title><rect x="84.7854%" y="276" width="0.1300%" height="15" fill="rgb(224,130,29)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="286.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_Vector_base (stl_vector.h:305) (2 samples, 0.13%)</title><rect x="84.7854%" y="292" width="0.1300%" height="15" fill="rgb(235,212,8)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="302.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_create_storage (stl_vector.h:361) (2 samples, 0.13%)</title><rect x="84.7854%" y="308" width="0.1300%" height="15" fill="rgb(223,33,50)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="318.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_allocate (stl_vector.h:346) (2 samples, 0.13%)</title><rect x="84.7854%" y="324" width="0.1300%" height="15" fill="rgb(219,149,13)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="334.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::allocate (alloc_traits.h:464) (2 samples, 0.13%)</title><rect x="84.7854%" y="340" width="0.1300%" height="15" fill="rgb(250,156,29)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="350.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::allocate (new_allocator.h:127) (2 samples, 0.13%)</title><rect x="84.7854%" y="356" width="0.1300%" height="15" fill="rgb(216,193,19)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="366.50"></text></g><g><title>operator new (libstdc++.so.6.0.30) (2 samples, 0.13%)</title><rect x="84.7854%" y="372" width="0.1300%" height="15" fill="rgb(216,135,14)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="382.50"></text></g><g><title>malloc (libc.so.6) (2 samples, 0.13%)</title><rect x="84.7854%" y="388" width="0.1300%" height="15" fill="rgb(241,47,5)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="398.50"></text></g><g><title>0x7fd7a165a95d (libc.so.6) (2 samples, 0.13%)</title><rect x="84.7854%" y="404" width="0.1300%" height="15" fill="rgb(233,42,35)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="414.50"></text></g><g><title>0x7fd7a16592cb (libc.so.6) (2 samples, 0.13%)</title><rect x="84.7854%" y="420" width="0.1300%" height="15" fill="rgb(231,13,6)" fg:x="1304" fg:w="2"/><text x="85.0354%" y="430.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (22 samples, 1.43%)</title><rect x="84.9155%" y="276" width="1.4304%" height="15" fill="rgb(207,181,40)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="286.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (22 samples, 1.43%)</title><rect x="84.9155%" y="292" width="1.4304%" height="15" fill="rgb(254,173,49)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="302.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (22 samples, 1.43%)</title><rect x="84.9155%" y="308" width="1.4304%" height="15" fill="rgb(221,1,38)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="318.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (22 samples, 1.43%)</title><rect x="84.9155%" y="324" width="1.4304%" height="15" fill="rgb(206,124,46)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="334.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (22 samples, 1.43%)</title><rect x="84.9155%" y="340" width="1.4304%" height="15" fill="rgb(249,21,11)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="350.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (22 samples, 1.43%)</title><rect x="84.9155%" y="356" width="1.4304%" height="15" fill="rgb(222,201,40)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="366.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (22 samples, 1.43%)</title><rect x="84.9155%" y="372" width="1.4304%" height="15" fill="rgb(235,61,29)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="382.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (22 samples, 1.43%)</title><rect x="84.9155%" y="388" width="1.4304%" height="15" fill="rgb(219,207,3)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="398.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (22 samples, 1.43%)</title><rect x="84.9155%" y="404" width="1.4304%" height="15" fill="rgb(222,56,46)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="414.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (22 samples, 1.43%)</title><rect x="84.9155%" y="420" width="1.4304%" height="15" fill="rgb(239,76,54)" fg:x="1306" fg:w="22"/><text x="85.1655%" y="430.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (214 samples, 13.91%)</title><rect x="72.5618%" y="260" width="13.9142%" height="15" fill="rgb(231,124,27)" fg:x="1116" fg:w="214"/><text x="72.8118%" y="270.50">binsearch (binarysear..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:683) (2 samples, 0.13%)</title><rect x="86.3459%" y="276" width="0.1300%" height="15" fill="rgb(249,195,6)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="286.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:337) (2 samples, 0.13%)</title><rect x="86.3459%" y="292" width="0.1300%" height="15" fill="rgb(237,174,47)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="302.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:355) (2 samples, 0.13%)</title><rect x="86.3459%" y="308" width="0.1300%" height="15" fill="rgb(206,201,31)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="318.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:496) (2 samples, 0.13%)</title><rect x="86.3459%" y="324" width="0.1300%" height="15" fill="rgb(231,57,52)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="334.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:150) (2 samples, 0.13%)</title><rect x="86.3459%" y="340" width="0.1300%" height="15" fill="rgb(248,177,22)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="350.50"></text></g><g><title>free (libc.so.6) (2 samples, 0.13%)</title><rect x="86.3459%" y="356" width="0.1300%" height="15" fill="rgb(215,211,37)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="366.50"></text></g><g><title>0x7fd7a1658f49 (libc.so.6) (2 samples, 0.13%)</title><rect x="86.3459%" y="372" width="0.1300%" height="15" fill="rgb(241,128,51)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="382.50"></text></g><g><title>0x7fd7a16586e4 (libc.so.6) (2 samples, 0.13%)</title><rect x="86.3459%" y="388" width="0.1300%" height="15" fill="rgb(227,165,31)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="398.50"></text></g><g><title>__default_morecore (libc.so.6) (2 samples, 0.13%)</title><rect x="86.3459%" y="404" width="0.1300%" height="15" fill="rgb(228,167,24)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="414.50"></text></g><g><title>sbrk (libc.so.6) (2 samples, 0.13%)</title><rect x="86.3459%" y="420" width="0.1300%" height="15" fill="rgb(228,143,12)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="430.50"></text></g><g><title>brk (libc.so.6) (2 samples, 0.13%)</title><rect x="86.3459%" y="436" width="0.1300%" height="15" fill="rgb(249,149,8)" fg:x="1328" fg:w="2"/><text x="86.5959%" y="446.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (234 samples, 15.21%)</title><rect x="72.5618%" y="244" width="15.2146%" height="15" fill="rgb(243,35,44)" fg:x="1116" fg:w="234"/><text x="72.8118%" y="254.50">binsearch (binarysearch..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (20 samples, 1.30%)</title><rect x="86.4759%" y="260" width="1.3004%" height="15" fill="rgb(246,89,9)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="270.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (20 samples, 1.30%)</title><rect x="86.4759%" y="276" width="1.3004%" height="15" fill="rgb(233,213,13)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="286.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (20 samples, 1.30%)</title><rect x="86.4759%" y="292" width="1.3004%" height="15" fill="rgb(233,141,41)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="302.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (20 samples, 1.30%)</title><rect x="86.4759%" y="308" width="1.3004%" height="15" fill="rgb(239,167,4)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="318.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (20 samples, 1.30%)</title><rect x="86.4759%" y="324" width="1.3004%" height="15" fill="rgb(209,217,16)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="334.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (20 samples, 1.30%)</title><rect x="86.4759%" y="340" width="1.3004%" height="15" fill="rgb(219,88,35)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="350.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (20 samples, 1.30%)</title><rect x="86.4759%" y="356" width="1.3004%" height="15" fill="rgb(220,193,23)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="366.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (20 samples, 1.30%)</title><rect x="86.4759%" y="372" width="1.3004%" height="15" fill="rgb(230,90,52)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="382.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (20 samples, 1.30%)</title><rect x="86.4759%" y="388" width="1.3004%" height="15" fill="rgb(252,106,19)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="398.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (20 samples, 1.30%)</title><rect x="86.4759%" y="404" width="1.3004%" height="15" fill="rgb(206,74,20)" fg:x="1330" fg:w="20"/><text x="86.7259%" y="414.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (255 samples, 16.58%)</title><rect x="72.5618%" y="228" width="16.5800%" height="15" fill="rgb(230,138,44)" fg:x="1116" fg:w="255"/><text x="72.8118%" y="238.50">binsearch (binarysearch.hp..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (21 samples, 1.37%)</title><rect x="87.7763%" y="244" width="1.3654%" height="15" fill="rgb(235,182,43)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="254.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (21 samples, 1.37%)</title><rect x="87.7763%" y="260" width="1.3654%" height="15" fill="rgb(242,16,51)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="270.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (21 samples, 1.37%)</title><rect x="87.7763%" y="276" width="1.3654%" height="15" fill="rgb(248,9,4)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="286.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (21 samples, 1.37%)</title><rect x="87.7763%" y="292" width="1.3654%" height="15" fill="rgb(210,31,22)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="302.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (21 samples, 1.37%)</title><rect x="87.7763%" y="308" width="1.3654%" height="15" fill="rgb(239,54,39)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="318.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (21 samples, 1.37%)</title><rect x="87.7763%" y="324" width="1.3654%" height="15" fill="rgb(230,99,41)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="334.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (21 samples, 1.37%)</title><rect x="87.7763%" y="340" width="1.3654%" height="15" fill="rgb(253,106,12)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="350.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (21 samples, 1.37%)</title><rect x="87.7763%" y="356" width="1.3654%" height="15" fill="rgb(213,46,41)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="366.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (21 samples, 1.37%)</title><rect x="87.7763%" y="372" width="1.3654%" height="15" fill="rgb(215,133,35)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="382.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (21 samples, 1.37%)</title><rect x="87.7763%" y="388" width="1.3654%" height="15" fill="rgb(213,28,5)" fg:x="1350" fg:w="21"/><text x="88.0263%" y="398.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (25 samples, 1.63%)</title><rect x="89.1417%" y="228" width="1.6255%" height="15" fill="rgb(215,77,49)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="238.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (25 samples, 1.63%)</title><rect x="89.1417%" y="244" width="1.6255%" height="15" fill="rgb(248,100,22)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="254.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (25 samples, 1.63%)</title><rect x="89.1417%" y="260" width="1.6255%" height="15" fill="rgb(208,67,9)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="270.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (25 samples, 1.63%)</title><rect x="89.1417%" y="276" width="1.6255%" height="15" fill="rgb(219,133,21)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="286.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (25 samples, 1.63%)</title><rect x="89.1417%" y="292" width="1.6255%" height="15" fill="rgb(246,46,29)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="302.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (25 samples, 1.63%)</title><rect x="89.1417%" y="308" width="1.6255%" height="15" fill="rgb(246,185,52)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="318.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (25 samples, 1.63%)</title><rect x="89.1417%" y="324" width="1.6255%" height="15" fill="rgb(252,136,11)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="334.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (25 samples, 1.63%)</title><rect x="89.1417%" y="340" width="1.6255%" height="15" fill="rgb(219,138,53)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="350.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (25 samples, 1.63%)</title><rect x="89.1417%" y="356" width="1.6255%" height="15" fill="rgb(211,51,23)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="366.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (25 samples, 1.63%)</title><rect x="89.1417%" y="372" width="1.6255%" height="15" fill="rgb(247,221,28)" fg:x="1371" fg:w="25"/><text x="89.3917%" y="382.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (286 samples, 18.60%)</title><rect x="72.5618%" y="212" width="18.5956%" height="15" fill="rgb(251,222,45)" fg:x="1116" fg:w="286"/><text x="72.8118%" y="222.50">binsearch (binarysearch.hpp:1..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:683) (6 samples, 0.39%)</title><rect x="90.7672%" y="228" width="0.3901%" height="15" fill="rgb(217,162,53)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="238.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:337) (6 samples, 0.39%)</title><rect x="90.7672%" y="244" width="0.3901%" height="15" fill="rgb(229,93,14)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="254.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:355) (6 samples, 0.39%)</title><rect x="90.7672%" y="260" width="0.3901%" height="15" fill="rgb(209,67,49)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="270.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:496) (6 samples, 0.39%)</title><rect x="90.7672%" y="276" width="0.3901%" height="15" fill="rgb(213,87,29)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="286.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:150) (6 samples, 0.39%)</title><rect x="90.7672%" y="292" width="0.3901%" height="15" fill="rgb(205,151,52)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="302.50"></text></g><g><title>free (libc.so.6) (6 samples, 0.39%)</title><rect x="90.7672%" y="308" width="0.3901%" height="15" fill="rgb(253,215,39)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="318.50"></text></g><g><title>0x7fd7a1658f49 (libc.so.6) (6 samples, 0.39%)</title><rect x="90.7672%" y="324" width="0.3901%" height="15" fill="rgb(221,220,41)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="334.50"></text></g><g><title>0x7fd7a16586e4 (libc.so.6) (6 samples, 0.39%)</title><rect x="90.7672%" y="340" width="0.3901%" height="15" fill="rgb(218,133,21)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="350.50"></text></g><g><title>__default_morecore (libc.so.6) (6 samples, 0.39%)</title><rect x="90.7672%" y="356" width="0.3901%" height="15" fill="rgb(221,193,43)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="366.50"></text></g><g><title>sbrk (libc.so.6) (6 samples, 0.39%)</title><rect x="90.7672%" y="372" width="0.3901%" height="15" fill="rgb(240,128,52)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="382.50"></text></g><g><title>brk (libc.so.6) (6 samples, 0.39%)</title><rect x="90.7672%" y="388" width="0.3901%" height="15" fill="rgb(253,114,12)" fg:x="1396" fg:w="6"/><text x="91.0172%" y="398.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (307 samples, 19.96%)</title><rect x="72.5618%" y="196" width="19.9610%" height="15" fill="rgb(215,223,47)" fg:x="1116" fg:w="307"/><text x="72.8118%" y="206.50">binsearch (binarysearch.hpp:12)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (21 samples, 1.37%)</title><rect x="91.1573%" y="212" width="1.3654%" height="15" fill="rgb(248,225,23)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="222.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (21 samples, 1.37%)</title><rect x="91.1573%" y="228" width="1.3654%" height="15" fill="rgb(250,108,0)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="238.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (21 samples, 1.37%)</title><rect x="91.1573%" y="244" width="1.3654%" height="15" fill="rgb(228,208,7)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="254.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (21 samples, 1.37%)</title><rect x="91.1573%" y="260" width="1.3654%" height="15" fill="rgb(244,45,10)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="270.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (21 samples, 1.37%)</title><rect x="91.1573%" y="276" width="1.3654%" height="15" fill="rgb(207,125,25)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="286.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (21 samples, 1.37%)</title><rect x="91.1573%" y="292" width="1.3654%" height="15" fill="rgb(210,195,18)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="302.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (21 samples, 1.37%)</title><rect x="91.1573%" y="308" width="1.3654%" height="15" fill="rgb(249,80,12)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="318.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (21 samples, 1.37%)</title><rect x="91.1573%" y="324" width="1.3654%" height="15" fill="rgb(221,65,9)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="334.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (21 samples, 1.37%)</title><rect x="91.1573%" y="340" width="1.3654%" height="15" fill="rgb(235,49,36)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="350.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (21 samples, 1.37%)</title><rect x="91.1573%" y="356" width="1.3654%" height="15" fill="rgb(225,32,20)" fg:x="1402" fg:w="21"/><text x="91.4073%" y="366.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (327 samples, 21.26%)</title><rect x="72.5618%" y="180" width="21.2614%" height="15" fill="rgb(215,141,46)" fg:x="1116" fg:w="327"/><text x="72.8118%" y="190.50">binsearch (binarysearch.hpp:14)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (20 samples, 1.30%)</title><rect x="92.5228%" y="196" width="1.3004%" height="15" fill="rgb(250,160,47)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="206.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (20 samples, 1.30%)</title><rect x="92.5228%" y="212" width="1.3004%" height="15" fill="rgb(216,222,40)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="222.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (20 samples, 1.30%)</title><rect x="92.5228%" y="228" width="1.3004%" height="15" fill="rgb(234,217,39)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="238.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (20 samples, 1.30%)</title><rect x="92.5228%" y="244" width="1.3004%" height="15" fill="rgb(207,178,40)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="254.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (20 samples, 1.30%)</title><rect x="92.5228%" y="260" width="1.3004%" height="15" fill="rgb(221,136,13)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="270.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (20 samples, 1.30%)</title><rect x="92.5228%" y="276" width="1.3004%" height="15" fill="rgb(249,199,10)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="286.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (20 samples, 1.30%)</title><rect x="92.5228%" y="292" width="1.3004%" height="15" fill="rgb(249,222,13)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="302.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (20 samples, 1.30%)</title><rect x="92.5228%" y="308" width="1.3004%" height="15" fill="rgb(244,185,38)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="318.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (20 samples, 1.30%)</title><rect x="92.5228%" y="324" width="1.3004%" height="15" fill="rgb(236,202,9)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="334.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (20 samples, 1.30%)</title><rect x="92.5228%" y="340" width="1.3004%" height="15" fill="rgb(250,229,37)" fg:x="1423" fg:w="20"/><text x="92.7728%" y="350.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (25 samples, 1.63%)</title><rect x="93.8231%" y="180" width="1.6255%" height="15" fill="rgb(206,174,23)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="190.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (25 samples, 1.63%)</title><rect x="93.8231%" y="196" width="1.6255%" height="15" fill="rgb(211,33,43)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="206.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (25 samples, 1.63%)</title><rect x="93.8231%" y="212" width="1.6255%" height="15" fill="rgb(245,58,50)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="222.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (25 samples, 1.63%)</title><rect x="93.8231%" y="228" width="1.6255%" height="15" fill="rgb(244,68,36)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="238.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (25 samples, 1.63%)</title><rect x="93.8231%" y="244" width="1.6255%" height="15" fill="rgb(232,229,15)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="254.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (25 samples, 1.63%)</title><rect x="93.8231%" y="260" width="1.6255%" height="15" fill="rgb(254,30,23)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="270.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (25 samples, 1.63%)</title><rect x="93.8231%" y="276" width="1.6255%" height="15" fill="rgb(235,160,14)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="286.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (25 samples, 1.63%)</title><rect x="93.8231%" y="292" width="1.6255%" height="15" fill="rgb(212,155,44)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="302.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (25 samples, 1.63%)</title><rect x="93.8231%" y="308" width="1.6255%" height="15" fill="rgb(226,2,50)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="318.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (25 samples, 1.63%)</title><rect x="93.8231%" y="324" width="1.6255%" height="15" fill="rgb(234,177,6)" fg:x="1443" fg:w="25"/><text x="94.0731%" y="334.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (364 samples, 23.67%)</title><rect x="72.5618%" y="164" width="23.6671%" height="15" fill="rgb(217,24,9)" fg:x="1116" fg:w="364"/><text x="72.8118%" y="174.50">binsearch (binarysearch.hpp:12)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:683) (12 samples, 0.78%)</title><rect x="95.4486%" y="180" width="0.7802%" height="15" fill="rgb(220,13,46)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="190.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:337) (12 samples, 0.78%)</title><rect x="95.4486%" y="196" width="0.7802%" height="15" fill="rgb(239,221,27)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="206.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:355) (12 samples, 0.78%)</title><rect x="95.4486%" y="212" width="0.7802%" height="15" fill="rgb(222,198,25)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="222.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:496) (12 samples, 0.78%)</title><rect x="95.4486%" y="228" width="0.7802%" height="15" fill="rgb(211,99,13)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="238.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:150) (12 samples, 0.78%)</title><rect x="95.4486%" y="244" width="0.7802%" height="15" fill="rgb(232,111,31)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="254.50"></text></g><g><title>free (libc.so.6) (12 samples, 0.78%)</title><rect x="95.4486%" y="260" width="0.7802%" height="15" fill="rgb(245,82,37)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="270.50"></text></g><g><title>0x7fd7a1658f49 (libc.so.6) (12 samples, 0.78%)</title><rect x="95.4486%" y="276" width="0.7802%" height="15" fill="rgb(227,149,46)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="286.50"></text></g><g><title>0x7fd7a16586e4 (libc.so.6) (12 samples, 0.78%)</title><rect x="95.4486%" y="292" width="0.7802%" height="15" fill="rgb(218,36,50)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="302.50"></text></g><g><title>__default_morecore (libc.so.6) (12 samples, 0.78%)</title><rect x="95.4486%" y="308" width="0.7802%" height="15" fill="rgb(226,80,48)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="318.50"></text></g><g><title>sbrk (libc.so.6) (12 samples, 0.78%)</title><rect x="95.4486%" y="324" width="0.7802%" height="15" fill="rgb(238,224,15)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="334.50"></text></g><g><title>brk (libc.so.6) (12 samples, 0.78%)</title><rect x="95.4486%" y="340" width="0.7802%" height="15" fill="rgb(241,136,10)" fg:x="1468" fg:w="12"/><text x="95.6986%" y="350.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (9 samples, 0.59%)</title><rect x="96.2289%" y="164" width="0.5852%" height="15" fill="rgb(208,32,45)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="174.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (9 samples, 0.59%)</title><rect x="96.2289%" y="180" width="0.5852%" height="15" fill="rgb(207,135,9)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="190.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (9 samples, 0.59%)</title><rect x="96.2289%" y="196" width="0.5852%" height="15" fill="rgb(206,86,44)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="206.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (9 samples, 0.59%)</title><rect x="96.2289%" y="212" width="0.5852%" height="15" fill="rgb(245,177,15)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="222.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (9 samples, 0.59%)</title><rect x="96.2289%" y="228" width="0.5852%" height="15" fill="rgb(206,64,50)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="238.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (9 samples, 0.59%)</title><rect x="96.2289%" y="244" width="0.5852%" height="15" fill="rgb(234,36,40)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="254.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (9 samples, 0.59%)</title><rect x="96.2289%" y="260" width="0.5852%" height="15" fill="rgb(213,64,8)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="270.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (9 samples, 0.59%)</title><rect x="96.2289%" y="276" width="0.5852%" height="15" fill="rgb(210,75,36)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="286.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (9 samples, 0.59%)</title><rect x="96.2289%" y="292" width="0.5852%" height="15" fill="rgb(229,88,21)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="302.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (9 samples, 0.59%)</title><rect x="96.2289%" y="308" width="0.5852%" height="15" fill="rgb(252,204,47)" fg:x="1480" fg:w="9"/><text x="96.4789%" y="318.50"></text></g><g><title>binsearch (binarysearch.hpp:14) (375 samples, 24.38%)</title><rect x="72.5618%" y="148" width="24.3823%" height="15" fill="rgb(208,77,27)" fg:x="1116" fg:w="375"/><text x="72.8118%" y="158.50">binsearch (binarysearch.hpp:14)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:683) (2 samples, 0.13%)</title><rect x="96.8140%" y="164" width="0.1300%" height="15" fill="rgb(221,76,26)" fg:x="1489" fg:w="2"/><text x="97.0640%" y="174.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:337) (2 samples, 0.13%)</title><rect x="96.8140%" y="180" width="0.1300%" height="15" fill="rgb(225,139,18)" fg:x="1489" fg:w="2"/><text x="97.0640%" y="190.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:355) (2 samples, 0.13%)</title><rect x="96.8140%" y="196" width="0.1300%" height="15" fill="rgb(230,137,11)" fg:x="1489" fg:w="2"/><text x="97.0640%" y="206.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:496) (2 samples, 0.13%)</title><rect x="96.8140%" y="212" width="0.1300%" height="15" fill="rgb(212,28,1)" fg:x="1489" fg:w="2"/><text x="97.0640%" y="222.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:150) (2 samples, 0.13%)</title><rect x="96.8140%" y="228" width="0.1300%" height="15" fill="rgb(248,164,17)" fg:x="1489" fg:w="2"/><text x="97.0640%" y="238.50"></text></g><g><title>free (libc.so.6) (2 samples, 0.13%)</title><rect x="96.8140%" y="244" width="0.1300%" height="15" fill="rgb(222,171,42)" fg:x="1489" fg:w="2"/><text x="97.0640%" y="254.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator= (stl_vector.h:715) (15 samples, 0.98%)</title><rect x="96.9441%" y="148" width="0.9753%" height="15" fill="rgb(243,84,45)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="158.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_move_assign (stl_vector.h:1821) (15 samples, 0.98%)</title><rect x="96.9441%" y="164" width="0.9753%" height="15" fill="rgb(252,49,23)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="174.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::~vector (stl_vector.h:683) (15 samples, 0.98%)</title><rect x="96.9441%" y="180" width="0.9753%" height="15" fill="rgb(215,19,7)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="190.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::~_Vector_base (stl_vector.h:337) (15 samples, 0.98%)</title><rect x="96.9441%" y="196" width="0.9753%" height="15" fill="rgb(238,81,41)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="206.50"></text></g><g><title>std::_Vector_base&lt;int, std::allocator&lt;int&gt; &gt;::_M_deallocate (stl_vector.h:355) (15 samples, 0.98%)</title><rect x="96.9441%" y="212" width="0.9753%" height="15" fill="rgb(210,199,37)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="222.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;int&gt; &gt;::deallocate (alloc_traits.h:496) (15 samples, 0.98%)</title><rect x="96.9441%" y="228" width="0.9753%" height="15" fill="rgb(244,192,49)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="238.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;int&gt;::deallocate (new_allocator.h:150) (15 samples, 0.98%)</title><rect x="96.9441%" y="244" width="0.9753%" height="15" fill="rgb(226,211,11)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="254.50"></text></g><g><title>free (libc.so.6) (15 samples, 0.98%)</title><rect x="96.9441%" y="260" width="0.9753%" height="15" fill="rgb(236,162,54)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="270.50"></text></g><g><title>0x7fd7a1658f49 (libc.so.6) (15 samples, 0.98%)</title><rect x="96.9441%" y="276" width="0.9753%" height="15" fill="rgb(220,229,9)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="286.50"></text></g><g><title>0x7fd7a16586e4 (libc.so.6) (15 samples, 0.98%)</title><rect x="96.9441%" y="292" width="0.9753%" height="15" fill="rgb(250,87,22)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="302.50"></text></g><g><title>__default_morecore (libc.so.6) (15 samples, 0.98%)</title><rect x="96.9441%" y="308" width="0.9753%" height="15" fill="rgb(239,43,17)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="318.50"></text></g><g><title>sbrk (libc.so.6) (15 samples, 0.98%)</title><rect x="96.9441%" y="324" width="0.9753%" height="15" fill="rgb(231,177,25)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="334.50"></text></g><g><title>brk (libc.so.6) (15 samples, 0.98%)</title><rect x="96.9441%" y="340" width="0.9753%" height="15" fill="rgb(219,179,1)" fg:x="1491" fg:w="15"/><text x="97.1941%" y="350.50"></text></g><g><title>&lt;module&gt; (binarysearch_native.py:8) (1,527 samples, 99.28%)</title><rect x="0.0000%" y="84" width="99.2848%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="1527"/><text x="0.2500%" y="94.50">&lt;module&gt; (binarysearch_native.py:8)</text></g><g><title>benchmark_native_binary_search (_binarysearch.pyx:23) (1,527 samples, 99.28%)</title><rect x="0.0000%" y="100" width="99.2848%" height="15" fill="rgb(232,167,36)" fg:x="0" fg:w="1527"/><text x="0.2500%" y="110.50">benchmark_native_binary_search (_binarysearch.pyx:23)</text></g><g><title>_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:23) (1,527 samples, 99.28%)</title><rect x="0.0000%" y="116" width="99.2848%" height="15" fill="rgb(244,19,51)" fg:x="0" fg:w="1527"/><text x="0.2500%" y="126.50">_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:23)</text></g><g><title>_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:26) (1,527 samples, 99.28%)</title><rect x="0.0000%" y="132" width="99.2848%" height="15" fill="rgb(224,6,22)" fg:x="0" fg:w="1527"/><text x="0.2500%" y="142.50">_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:26)</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::vector (stl_vector.h:557) (21 samples, 1.37%)</title><rect x="97.9194%" y="148" width="1.3654%" height="15" fill="rgb(224,145,5)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="158.50"></text></g><g><title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*, int&gt; (stl_uninitialized.h:333) (21 samples, 1.37%)</title><rect x="97.9194%" y="164" width="1.3654%" height="15" fill="rgb(234,130,49)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="174.50"></text></g><g><title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:152) (21 samples, 1.37%)</title><rect x="97.9194%" y="180" width="1.3654%" height="15" fill="rgb(254,6,2)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="190.50"></text></g><g><title>std::__uninitialized_copy&lt;true&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_uninitialized.h:110) (21 samples, 1.37%)</title><rect x="97.9194%" y="196" width="1.3654%" height="15" fill="rgb(208,96,46)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="206.50"></text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:621) (21 samples, 1.37%)</title><rect x="97.9194%" y="212" width="1.3654%" height="15" fill="rgb(239,3,39)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="222.50"></text></g><g><title>std::__copy_move_a&lt;false, __gnu_cxx::__normal_iterator&lt;int const*, std::vector&lt;int, std::allocator&lt;int&gt; &gt; &gt;, int*&gt; (stl_algobase.h:529) (21 samples, 1.37%)</title><rect x="97.9194%" y="228" width="1.3654%" height="15" fill="rgb(233,210,1)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="238.50"></text></g><g><title>std::__copy_move_a1&lt;false, int const*, int*&gt; (stl_algobase.h:522) (21 samples, 1.37%)</title><rect x="97.9194%" y="244" width="1.3654%" height="15" fill="rgb(244,137,37)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="254.50"></text></g><g><title>std::__copy_move_a2&lt;false, int const*, int*&gt; (stl_algobase.h:496) (21 samples, 1.37%)</title><rect x="97.9194%" y="260" width="1.3654%" height="15" fill="rgb(240,136,2)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="270.50"></text></g><g><title>std::__copy_move&lt;false, true, std::random_access_iterator_tag&gt;::__copy_m&lt;int&gt; (stl_algobase.h:432) (21 samples, 1.37%)</title><rect x="97.9194%" y="276" width="1.3654%" height="15" fill="rgb(239,18,37)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="286.50"></text></g><g><title>0x7fd7a1756c4a (libc.so.6) (21 samples, 1.37%)</title><rect x="97.9194%" y="292" width="1.3654%" height="15" fill="rgb(218,185,22)" fg:x="1506" fg:w="21"/><text x="98.1694%" y="302.50"></text></g><g><title>all (1,538 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="1538"/><text x="0.2500%" y="62.50"></text></g><g><title>0x7fd7a15dfd90 (libc.so.6) (1,538 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="1538"/><text x="0.2500%" y="78.50">0x7fd7a15dfd90 (libc.so.6)</text></g><g><title>gc_collect_main (python3.10) (11 samples, 0.72%)</title><rect x="99.2848%" y="84" width="0.7152%" height="15" fill="rgb(242,56,43)" fg:x="1527" fg:w="11"/><text x="99.5348%" y="94.50"></text></g><g><title>unicode_dealloc (python3.10) (2 samples, 0.13%)</title><rect x="99.8700%" y="100" width="0.1300%" height="15" fill="rgb(233,99,24)" fg:x="1536" fg:w="2"/><text x="100.1200%" y="110.50"></text></g></svg></svg>