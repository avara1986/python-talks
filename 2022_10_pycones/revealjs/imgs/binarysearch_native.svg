<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="442" onload="init(evt)" viewBox="0 0 1200 442" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="442" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">/home/alberto.vara/mio/python-talks/2022_10_pycones/venv/bin/py-spy record --rate 1000 --native -o flamegraphs/binarysearch_native.svg -- python binarysearch_native.py</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="431.00"> </text><svg id="frames" x="10" width="1180" total_samples="230"><g><title>_Py_DECREF (object.h:466) (1 samples, 0.43%)</title><rect x="5.6522%" y="148" width="0.4348%" height="15" fill="rgb(227,0,7)" fg:x="13" fg:w="1"/><text x="5.9022%" y="158.50"></text></g><g><title>_Py_DECREF (object.h:470) (3 samples, 1.30%)</title><rect x="6.0870%" y="148" width="1.3043%" height="15" fill="rgb(217,0,24)" fg:x="14" fg:w="3"/><text x="6.3370%" y="158.50"></text></g><g><title>_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:32) (23 samples, 10.00%)</title><rect x="0.0000%" y="116" width="10.0000%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="23"/><text x="0.2500%" y="126.50">_binarysearch_..</text></g><g><title>_Py_XDECREF (object.h:543) (10 samples, 4.35%)</title><rect x="5.6522%" y="132" width="4.3478%" height="15" fill="rgb(248,212,6)" fg:x="13" fg:w="10"/><text x="5.9022%" y="142.50">_Py_X..</text></g><g><title>_Py_DECREF (object.h:480) (6 samples, 2.61%)</title><rect x="7.3913%" y="148" width="2.6087%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="6"/><text x="7.6413%" y="158.50">_P..</text></g><g><title>0x701077f8f720 (_binarysearch.cpython-38-x86_64-linux-gnu.so) (1 samples, 0.43%)</title><rect x="9.5652%" y="164" width="0.4348%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="1"/><text x="9.8152%" y="174.50"></text></g><g><title>_Py_DECREF (object.h:466) (1 samples, 0.43%)</title><rect x="19.1304%" y="132" width="0.4348%" height="15" fill="rgb(207,160,47)" fg:x="44" fg:w="1"/><text x="19.3804%" y="142.50"></text></g><g><title>_Py_DECREF (object.h:470) (2 samples, 0.87%)</title><rect x="19.5652%" y="132" width="0.8696%" height="15" fill="rgb(228,23,34)" fg:x="45" fg:w="2"/><text x="19.8152%" y="142.50"></text></g><g><title>_Py_DECREF (object.h:480) (7 samples, 3.04%)</title><rect x="20.4348%" y="132" width="3.0435%" height="15" fill="rgb(218,30,26)" fg:x="47" fg:w="7"/><text x="20.6848%" y="142.50">_Py..</text></g><g><title>0x701077f8f720 (_binarysearch.cpython-38-x86_64-linux-gnu.so) (1 samples, 0.43%)</title><rect x="23.0435%" y="148" width="0.4348%" height="15" fill="rgb(220,122,19)" fg:x="53" fg:w="1"/><text x="23.2935%" y="158.50"></text></g><g><title>_binarysearch_native_binary_search (_binarysearch.pyx:13) (5 samples, 2.17%)</title><rect x="23.4783%" y="132" width="2.1739%" height="15" fill="rgb(250,228,42)" fg:x="54" fg:w="5"/><text x="23.7283%" y="142.50">_..</text></g><g><title>_Py_XDECREF (object.h:539) (1 samples, 0.43%)</title><rect x="27.3913%" y="148" width="0.4348%" height="15" fill="rgb(240,193,28)" fg:x="63" fg:w="1"/><text x="27.6413%" y="158.50"></text></g><g><title>__Pyx_PyInt_From_int (vector.from_py:45) (8 samples, 3.48%)</title><rect x="27.8261%" y="148" width="3.4783%" height="15" fill="rgb(216,20,37)" fg:x="64" fg:w="8"/><text x="28.0761%" y="158.50">__P..</text></g><g><title>0x701077f8f900 (_binarysearch.cpython-38-x86_64-linux-gnu.so) (1 samples, 0.43%)</title><rect x="30.8696%" y="164" width="0.4348%" height="15" fill="rgb(206,188,39)" fg:x="71" fg:w="1"/><text x="31.1196%" y="174.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (3 samples, 1.30%)</title><rect x="31.3043%" y="148" width="1.3043%" height="15" fill="rgb(217,207,13)" fg:x="72" fg:w="3"/><text x="31.5543%" y="158.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (1 samples, 0.43%)</title><rect x="32.1739%" y="164" width="0.4348%" height="15" fill="rgb(231,73,38)" fg:x="74" fg:w="1"/><text x="32.4239%" y="174.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (1 samples, 0.43%)</title><rect x="32.6087%" y="164" width="0.4348%" height="15" fill="rgb(225,20,46)" fg:x="75" fg:w="1"/><text x="32.8587%" y="174.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (2 samples, 0.87%)</title><rect x="32.6087%" y="148" width="0.8696%" height="15" fill="rgb(210,31,41)" fg:x="75" fg:w="2"/><text x="32.8587%" y="158.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1044) (1 samples, 0.43%)</title><rect x="33.0435%" y="164" width="0.4348%" height="15" fill="rgb(221,200,47)" fg:x="76" fg:w="1"/><text x="33.2935%" y="174.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="33.9130%" y="180" width="0.4348%" height="15" fill="rgb(226,26,5)" fg:x="78" fg:w="1"/><text x="34.1630%" y="190.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (2 samples, 0.87%)</title><rect x="33.9130%" y="164" width="0.8696%" height="15" fill="rgb(249,33,26)" fg:x="78" fg:w="2"/><text x="34.1630%" y="174.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1044) (1 samples, 0.43%)</title><rect x="34.3478%" y="180" width="0.4348%" height="15" fill="rgb(235,183,28)" fg:x="79" fg:w="1"/><text x="34.5978%" y="190.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (1 samples, 0.43%)</title><rect x="34.7826%" y="164" width="0.4348%" height="15" fill="rgb(221,5,38)" fg:x="80" fg:w="1"/><text x="35.0326%" y="174.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (1 samples, 0.43%)</title><rect x="34.7826%" y="180" width="0.4348%" height="15" fill="rgb(247,18,42)" fg:x="80" fg:w="1"/><text x="35.0326%" y="190.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="36.0870%" y="196" width="0.4348%" height="15" fill="rgb(241,131,45)" fg:x="83" fg:w="1"/><text x="36.3370%" y="206.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (3 samples, 1.30%)</title><rect x="35.6522%" y="180" width="1.3043%" height="15" fill="rgb(249,31,29)" fg:x="82" fg:w="3"/><text x="35.9022%" y="190.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (1 samples, 0.43%)</title><rect x="36.5217%" y="196" width="0.4348%" height="15" fill="rgb(225,111,53)" fg:x="84" fg:w="1"/><text x="36.7717%" y="206.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (3 samples, 1.30%)</title><rect x="36.9565%" y="180" width="1.3043%" height="15" fill="rgb(238,160,17)" fg:x="85" fg:w="3"/><text x="37.2065%" y="190.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (2 samples, 0.87%)</title><rect x="37.3913%" y="196" width="0.8696%" height="15" fill="rgb(214,148,48)" fg:x="86" fg:w="2"/><text x="37.6413%" y="206.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (3 samples, 1.30%)</title><rect x="38.2609%" y="196" width="1.3043%" height="15" fill="rgb(232,36,49)" fg:x="88" fg:w="3"/><text x="38.5109%" y="206.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="39.1304%" y="212" width="0.4348%" height="15" fill="rgb(209,103,24)" fg:x="90" fg:w="1"/><text x="39.3804%" y="222.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="40.4348%" y="212" width="0.4348%" height="15" fill="rgb(229,88,8)" fg:x="93" fg:w="1"/><text x="40.6848%" y="222.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (6 samples, 2.61%)</title><rect x="39.5652%" y="196" width="2.6087%" height="15" fill="rgb(213,181,19)" fg:x="91" fg:w="6"/><text x="39.8152%" y="206.50">bi..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (3 samples, 1.30%)</title><rect x="40.8696%" y="212" width="1.3043%" height="15" fill="rgb(254,191,54)" fg:x="94" fg:w="3"/><text x="41.1196%" y="222.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (2 samples, 0.87%)</title><rect x="44.3478%" y="228" width="0.8696%" height="15" fill="rgb(241,83,37)" fg:x="102" fg:w="2"/><text x="44.5978%" y="238.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (5 samples, 2.17%)</title><rect x="43.4783%" y="212" width="2.1739%" height="15" fill="rgb(233,36,39)" fg:x="100" fg:w="5"/><text x="43.7283%" y="222.50">b..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1044) (1 samples, 0.43%)</title><rect x="45.2174%" y="228" width="0.4348%" height="15" fill="rgb(226,3,54)" fg:x="104" fg:w="1"/><text x="45.4674%" y="238.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (3 samples, 1.30%)</title><rect x="45.6522%" y="228" width="1.3043%" height="15" fill="rgb(245,192,40)" fg:x="105" fg:w="3"/><text x="45.9022%" y="238.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (2 samples, 0.87%)</title><rect x="46.9565%" y="228" width="0.8696%" height="15" fill="rgb(238,167,29)" fg:x="108" fg:w="2"/><text x="47.2065%" y="238.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (2 samples, 0.87%)</title><rect x="47.8261%" y="244" width="0.8696%" height="15" fill="rgb(232,182,51)" fg:x="110" fg:w="2"/><text x="48.0761%" y="254.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="48.2609%" y="260" width="0.4348%" height="15" fill="rgb(231,60,39)" fg:x="111" fg:w="1"/><text x="48.5109%" y="270.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (3 samples, 1.30%)</title><rect x="48.6957%" y="244" width="1.3043%" height="15" fill="rgb(208,69,12)" fg:x="112" fg:w="3"/><text x="48.9457%" y="254.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (1 samples, 0.43%)</title><rect x="49.5652%" y="260" width="0.4348%" height="15" fill="rgb(235,93,37)" fg:x="114" fg:w="1"/><text x="49.8152%" y="270.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (1 samples, 0.43%)</title><rect x="50.0000%" y="260" width="0.4348%" height="15" fill="rgb(213,116,39)" fg:x="115" fg:w="1"/><text x="50.2500%" y="270.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (4 samples, 1.74%)</title><rect x="50.4348%" y="260" width="1.7391%" height="15" fill="rgb(222,207,29)" fg:x="116" fg:w="4"/><text x="50.6848%" y="270.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (2 samples, 0.87%)</title><rect x="51.3043%" y="276" width="0.8696%" height="15" fill="rgb(206,96,30)" fg:x="118" fg:w="2"/><text x="51.5543%" y="286.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (2 samples, 0.87%)</title><rect x="52.6087%" y="276" width="0.8696%" height="15" fill="rgb(218,138,4)" fg:x="121" fg:w="2"/><text x="52.8587%" y="286.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="53.0435%" y="292" width="0.4348%" height="15" fill="rgb(250,191,14)" fg:x="122" fg:w="1"/><text x="53.2935%" y="302.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (3 samples, 1.30%)</title><rect x="53.4783%" y="292" width="1.3043%" height="15" fill="rgb(239,60,40)" fg:x="123" fg:w="3"/><text x="53.7283%" y="302.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (1 samples, 0.43%)</title><rect x="54.3478%" y="308" width="0.4348%" height="15" fill="rgb(206,27,48)" fg:x="125" fg:w="1"/><text x="54.5978%" y="318.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (1 samples, 0.43%)</title><rect x="54.7826%" y="292" width="0.4348%" height="15" fill="rgb(225,35,8)" fg:x="126" fg:w="1"/><text x="55.0326%" y="302.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (3 samples, 1.30%)</title><rect x="55.2174%" y="308" width="1.3043%" height="15" fill="rgb(250,213,24)" fg:x="127" fg:w="3"/><text x="55.4674%" y="318.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1044) (2 samples, 0.87%)</title><rect x="55.6522%" y="324" width="0.8696%" height="15" fill="rgb(247,123,22)" fg:x="128" fg:w="2"/><text x="55.9022%" y="334.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (2 samples, 0.87%)</title><rect x="56.5217%" y="308" width="0.8696%" height="15" fill="rgb(231,138,38)" fg:x="130" fg:w="2"/><text x="56.7717%" y="318.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (2 samples, 0.87%)</title><rect x="56.5217%" y="324" width="0.8696%" height="15" fill="rgb(231,145,46)" fg:x="130" fg:w="2"/><text x="56.7717%" y="334.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (7 samples, 3.04%)</title><rect x="57.8261%" y="324" width="3.0435%" height="15" fill="rgb(251,118,11)" fg:x="133" fg:w="7"/><text x="58.0761%" y="334.50">bin..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1044) (2 samples, 0.87%)</title><rect x="60.0000%" y="340" width="0.8696%" height="15" fill="rgb(217,147,25)" fg:x="138" fg:w="2"/><text x="60.2500%" y="350.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (1 samples, 0.43%)</title><rect x="60.8696%" y="340" width="0.4348%" height="15" fill="rgb(247,81,37)" fg:x="140" fg:w="1"/><text x="61.1196%" y="350.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="60.8696%" y="356" width="0.4348%" height="15" fill="rgb(209,12,38)" fg:x="140" fg:w="1"/><text x="61.1196%" y="366.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (1 samples, 0.43%)</title><rect x="61.3043%" y="340" width="0.4348%" height="15" fill="rgb(227,1,9)" fg:x="141" fg:w="1"/><text x="61.5543%" y="350.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="61.3043%" y="356" width="0.4348%" height="15" fill="rgb(248,47,43)" fg:x="141" fg:w="1"/><text x="61.5543%" y="366.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (4 samples, 1.74%)</title><rect x="61.7391%" y="356" width="1.7391%" height="15" fill="rgb(221,10,30)" fg:x="142" fg:w="4"/><text x="61.9891%" y="366.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (1 samples, 0.43%)</title><rect x="63.0435%" y="372" width="0.4348%" height="15" fill="rgb(210,229,1)" fg:x="145" fg:w="1"/><text x="63.2935%" y="382.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (8 samples, 3.48%)</title><rect x="63.4783%" y="356" width="3.4783%" height="15" fill="rgb(222,148,37)" fg:x="146" fg:w="8"/><text x="63.7283%" y="366.50">bin..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (4 samples, 1.74%)</title><rect x="65.2174%" y="372" width="1.7391%" height="15" fill="rgb(234,67,33)" fg:x="150" fg:w="4"/><text x="65.4674%" y="382.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (5 samples, 2.17%)</title><rect x="66.9565%" y="372" width="2.1739%" height="15" fill="rgb(247,98,35)" fg:x="154" fg:w="5"/><text x="67.2065%" y="382.50">b..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1044) (1 samples, 0.43%)</title><rect x="68.6957%" y="388" width="0.4348%" height="15" fill="rgb(247,138,52)" fg:x="158" fg:w="1"/><text x="68.9457%" y="398.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="70.8696%" y="388" width="0.4348%" height="15" fill="rgb(213,79,30)" fg:x="163" fg:w="1"/><text x="71.1196%" y="398.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (6 samples, 2.61%)</title><rect x="69.1304%" y="372" width="2.6087%" height="15" fill="rgb(246,177,23)" fg:x="159" fg:w="6"/><text x="69.3804%" y="382.50">bi..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1043) (1 samples, 0.43%)</title><rect x="71.3043%" y="388" width="0.4348%" height="15" fill="rgb(230,62,27)" fg:x="164" fg:w="1"/><text x="71.5543%" y="398.50"></text></g><g><title>binsearch (binarysearch.hpp:10) (2 samples, 0.87%)</title><rect x="71.7391%" y="388" width="0.8696%" height="15" fill="rgb(216,154,8)" fg:x="165" fg:w="2"/><text x="71.9891%" y="398.50"></text></g><g><title>binsearch (binarysearch.hpp:12) (1 samples, 0.43%)</title><rect x="72.6087%" y="388" width="0.4348%" height="15" fill="rgb(244,35,45)" fg:x="167" fg:w="1"/><text x="72.8587%" y="398.50"></text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::operator[] (stl_vector.h:1040) (1 samples, 0.43%)</title><rect x="72.6087%" y="404" width="0.4348%" height="15" fill="rgb(251,115,12)" fg:x="167" fg:w="1"/><text x="72.8587%" y="414.50"></text></g><g><title>binsearch (binarysearch.hpp:7) (3 samples, 1.30%)</title><rect x="73.9130%" y="404" width="1.3043%" height="15" fill="rgb(240,54,50)" fg:x="170" fg:w="3"/><text x="74.1630%" y="414.50"></text></g><g><title>binsearch (binarysearch.hpp:15) (6 samples, 2.61%)</title><rect x="73.0435%" y="388" width="2.6087%" height="15" fill="rgb(233,84,52)" fg:x="168" fg:w="6"/><text x="73.2935%" y="398.50">bi..</text></g><g><title>binsearch (binarysearch.hpp:8) (1 samples, 0.43%)</title><rect x="75.2174%" y="404" width="0.4348%" height="15" fill="rgb(207,117,47)" fg:x="173" fg:w="1"/><text x="75.4674%" y="414.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (2 samples, 0.87%)</title><rect x="75.6522%" y="388" width="0.8696%" height="15" fill="rgb(249,43,39)" fg:x="174" fg:w="2"/><text x="75.9022%" y="398.50"></text></g><g><title>binsearch (binarysearch.hpp:15) (12 samples, 5.22%)</title><rect x="71.7391%" y="372" width="5.2174%" height="15" fill="rgb(209,38,44)" fg:x="165" fg:w="12"/><text x="71.9891%" y="382.50">binsea..</text></g><g><title>binsearch (binarysearch.hpp:9) (1 samples, 0.43%)</title><rect x="76.5217%" y="388" width="0.4348%" height="15" fill="rgb(236,212,23)" fg:x="176" fg:w="1"/><text x="76.7717%" y="398.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (1 samples, 0.43%)</title><rect x="76.9565%" y="372" width="0.4348%" height="15" fill="rgb(242,79,21)" fg:x="177" fg:w="1"/><text x="77.2065%" y="382.50"></text></g><g><title>binsearch (binarysearch.hpp:13) (25 samples, 10.87%)</title><rect x="66.9565%" y="356" width="10.8696%" height="15" fill="rgb(211,96,35)" fg:x="154" fg:w="25"/><text x="67.2065%" y="366.50">binsearch (binar..</text></g><g><title>binsearch (binarysearch.hpp:7) (1 samples, 0.43%)</title><rect x="77.3913%" y="372" width="0.4348%" height="15" fill="rgb(253,215,40)" fg:x="178" fg:w="1"/><text x="77.6413%" y="382.50"></text></g><g><title>binsearch (binarysearch.hpp:15) (38 samples, 16.52%)</title><rect x="61.7391%" y="340" width="16.5217%" height="15" fill="rgb(211,81,21)" fg:x="142" fg:w="38"/><text x="61.9891%" y="350.50">binsearch (binarysearch.hp..</text></g><g><title>binsearch (binarysearch.hpp:7) (1 samples, 0.43%)</title><rect x="77.8261%" y="356" width="0.4348%" height="15" fill="rgb(208,190,38)" fg:x="179" fg:w="1"/><text x="78.0761%" y="366.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (1 samples, 0.43%)</title><rect x="78.2609%" y="340" width="0.4348%" height="15" fill="rgb(235,213,38)" fg:x="180" fg:w="1"/><text x="78.5109%" y="350.50"></text></g><g><title>binsearch (binarysearch.hpp:7) (1 samples, 0.43%)</title><rect x="78.6957%" y="340" width="0.4348%" height="15" fill="rgb(237,122,38)" fg:x="181" fg:w="1"/><text x="78.9457%" y="350.50"></text></g><g><title>binsearch (binarysearch.hpp:13) (43 samples, 18.70%)</title><rect x="60.8696%" y="324" width="18.6957%" height="15" fill="rgb(244,218,35)" fg:x="140" fg:w="43"/><text x="61.1196%" y="334.50">binsearch (binarysearch.hpp:1..</text></g><g><title>binsearch (binarysearch.hpp:9) (1 samples, 0.43%)</title><rect x="79.1304%" y="340" width="0.4348%" height="15" fill="rgb(240,68,47)" fg:x="182" fg:w="1"/><text x="79.3804%" y="350.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (4 samples, 1.74%)</title><rect x="79.5652%" y="324" width="1.7391%" height="15" fill="rgb(210,16,53)" fg:x="183" fg:w="4"/><text x="79.8152%" y="334.50"></text></g><g><title>binsearch (binarysearch.hpp:15) (56 samples, 24.35%)</title><rect x="57.3913%" y="308" width="24.3478%" height="15" fill="rgb(235,124,12)" fg:x="132" fg:w="56"/><text x="57.6413%" y="318.50">binsearch (binarysearch.hpp:15)</text></g><g><title>binsearch (binarysearch.hpp:9) (1 samples, 0.43%)</title><rect x="81.3043%" y="324" width="0.4348%" height="15" fill="rgb(224,169,11)" fg:x="187" fg:w="1"/><text x="81.5543%" y="334.50"></text></g><g><title>binsearch (binarysearch.hpp:13) (62 samples, 26.96%)</title><rect x="55.2174%" y="292" width="26.9565%" height="15" fill="rgb(250,166,2)" fg:x="127" fg:w="62"/><text x="55.4674%" y="302.50">binsearch (binarysearch.hpp:13)</text></g><g><title>binsearch (binarysearch.hpp:7) (1 samples, 0.43%)</title><rect x="81.7391%" y="308" width="0.4348%" height="15" fill="rgb(242,216,29)" fg:x="188" fg:w="1"/><text x="81.9891%" y="318.50"></text></g><g><title>binsearch (binarysearch.hpp:15) (67 samples, 29.13%)</title><rect x="53.4783%" y="276" width="29.1304%" height="15" fill="rgb(230,116,27)" fg:x="123" fg:w="67"/><text x="53.7283%" y="286.50">binsearch (binarysearch.hpp:15)</text></g><g><title>binsearch (binarysearch.hpp:20) (1 samples, 0.43%)</title><rect x="82.1739%" y="292" width="0.4348%" height="15" fill="rgb(228,99,48)" fg:x="189" fg:w="1"/><text x="82.4239%" y="302.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (3 samples, 1.30%)</title><rect x="82.6087%" y="276" width="1.3043%" height="15" fill="rgb(253,11,6)" fg:x="190" fg:w="3"/><text x="82.8587%" y="286.50"></text></g><g><title>binsearch (binarysearch.hpp:7) (1 samples, 0.43%)</title><rect x="83.9130%" y="276" width="0.4348%" height="15" fill="rgb(247,143,39)" fg:x="193" fg:w="1"/><text x="84.1630%" y="286.50"></text></g><g><title>binsearch (binarysearch.hpp:13) (75 samples, 32.61%)</title><rect x="52.1739%" y="260" width="32.6087%" height="15" fill="rgb(236,97,10)" fg:x="120" fg:w="75"/><text x="52.4239%" y="270.50">binsearch (binarysearch.hpp:13)</text></g><g><title>binsearch (binarysearch.hpp:9) (1 samples, 0.43%)</title><rect x="84.3478%" y="276" width="0.4348%" height="15" fill="rgb(233,208,19)" fg:x="194" fg:w="1"/><text x="84.5978%" y="286.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (3 samples, 1.30%)</title><rect x="84.7826%" y="260" width="1.3043%" height="15" fill="rgb(216,164,2)" fg:x="195" fg:w="3"/><text x="85.0326%" y="270.50"></text></g><g><title>binsearch (binarysearch.hpp:15) (86 samples, 37.39%)</title><rect x="50.0000%" y="244" width="37.3913%" height="15" fill="rgb(220,129,5)" fg:x="115" fg:w="86"/><text x="50.2500%" y="254.50">binsearch (binarysearch.hpp:15)</text></g><g><title>binsearch (binarysearch.hpp:9) (3 samples, 1.30%)</title><rect x="86.0870%" y="260" width="1.3043%" height="15" fill="rgb(242,17,10)" fg:x="198" fg:w="3"/><text x="86.3370%" y="270.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (1 samples, 0.43%)</title><rect x="87.3913%" y="244" width="0.4348%" height="15" fill="rgb(242,107,0)" fg:x="201" fg:w="1"/><text x="87.6413%" y="254.50"></text></g><g><title>binsearch (binarysearch.hpp:13) (93 samples, 40.43%)</title><rect x="47.8261%" y="228" width="40.4348%" height="15" fill="rgb(251,28,31)" fg:x="110" fg:w="93"/><text x="48.0761%" y="238.50">binsearch (binarysearch.hpp:13)</text></g><g><title>binsearch (binarysearch.hpp:9) (1 samples, 0.43%)</title><rect x="87.8261%" y="244" width="0.4348%" height="15" fill="rgb(233,223,10)" fg:x="202" fg:w="1"/><text x="88.0761%" y="254.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (2 samples, 0.87%)</title><rect x="88.2609%" y="228" width="0.8696%" height="15" fill="rgb(215,21,27)" fg:x="203" fg:w="2"/><text x="88.5109%" y="238.50"></text></g><g><title>binsearch (binarysearch.hpp:7) (2 samples, 0.87%)</title><rect x="89.1304%" y="228" width="0.8696%" height="15" fill="rgb(232,23,21)" fg:x="205" fg:w="2"/><text x="89.3804%" y="238.50"></text></g><g><title>binsearch (binarysearch.hpp:15) (103 samples, 44.78%)</title><rect x="45.6522%" y="212" width="44.7826%" height="15" fill="rgb(244,5,23)" fg:x="105" fg:w="103"/><text x="45.9022%" y="222.50">binsearch (binarysearch.hpp:15)</text></g><g><title>binsearch (binarysearch.hpp:9) (1 samples, 0.43%)</title><rect x="90.0000%" y="228" width="0.4348%" height="15" fill="rgb(226,81,46)" fg:x="207" fg:w="1"/><text x="90.2500%" y="238.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (1 samples, 0.43%)</title><rect x="90.4348%" y="212" width="0.4348%" height="15" fill="rgb(247,70,30)" fg:x="208" fg:w="1"/><text x="90.6848%" y="222.50"></text></g><g><title>binsearch (binarysearch.hpp:7) (1 samples, 0.43%)</title><rect x="90.8696%" y="212" width="0.4348%" height="15" fill="rgb(212,68,19)" fg:x="209" fg:w="1"/><text x="91.1196%" y="222.50"></text></g><g><title>binsearch (binarysearch.hpp:13) (114 samples, 49.57%)</title><rect x="42.1739%" y="196" width="49.5652%" height="15" fill="rgb(240,187,13)" fg:x="97" fg:w="114"/><text x="42.4239%" y="206.50">binsearch (binarysearch.hpp:13)</text></g><g><title>binsearch (binarysearch.hpp:9) (1 samples, 0.43%)</title><rect x="91.3043%" y="212" width="0.4348%" height="15" fill="rgb(223,113,26)" fg:x="210" fg:w="1"/><text x="91.5543%" y="222.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (2 samples, 0.87%)</title><rect x="91.7391%" y="196" width="0.8696%" height="15" fill="rgb(206,192,2)" fg:x="211" fg:w="2"/><text x="91.9891%" y="206.50"></text></g><g><title>binsearch (binarysearch.hpp:7) (1 samples, 0.43%)</title><rect x="92.6087%" y="196" width="0.4348%" height="15" fill="rgb(241,108,4)" fg:x="213" fg:w="1"/><text x="92.8587%" y="206.50"></text></g><g><title>binsearch (binarysearch.hpp:15) (128 samples, 55.65%)</title><rect x="38.2609%" y="180" width="55.6522%" height="15" fill="rgb(247,173,49)" fg:x="88" fg:w="128"/><text x="38.5109%" y="190.50">binsearch (binarysearch.hpp:15)</text></g><g><title>binsearch (binarysearch.hpp:9) (2 samples, 0.87%)</title><rect x="93.0435%" y="196" width="0.8696%" height="15" fill="rgb(224,114,35)" fg:x="214" fg:w="2"/><text x="93.2935%" y="206.50"></text></g><g><title>binsearch (binarysearch.hpp:20) (1 samples, 0.43%)</title><rect x="93.9130%" y="180" width="0.4348%" height="15" fill="rgb(245,159,27)" fg:x="216" fg:w="1"/><text x="94.1630%" y="190.50"></text></g><g><title>binsearch (binarysearch.hpp:7) (1 samples, 0.43%)</title><rect x="94.3478%" y="180" width="0.4348%" height="15" fill="rgb(245,172,44)" fg:x="217" fg:w="1"/><text x="94.5978%" y="190.50"></text></g><g><title>binsearch (binarysearch.hpp:13) (138 samples, 60.00%)</title><rect x="35.2174%" y="164" width="60.0000%" height="15" fill="rgb(236,23,11)" fg:x="81" fg:w="138"/><text x="35.4674%" y="174.50">binsearch (binarysearch.hpp:13)</text></g><g><title>binsearch (binarysearch.hpp:9) (1 samples, 0.43%)</title><rect x="94.7826%" y="180" width="0.4348%" height="15" fill="rgb(205,117,38)" fg:x="218" fg:w="1"/><text x="95.0326%" y="190.50"></text></g><g><title>binsearch (binarysearch.hpp:15) (146 samples, 63.48%)</title><rect x="33.4783%" y="148" width="63.4783%" height="15" fill="rgb(237,72,25)" fg:x="77" fg:w="146"/><text x="33.7283%" y="158.50">binsearch (binarysearch.hpp:15)</text></g><g><title>binsearch (binarysearch.hpp:20) (4 samples, 1.74%)</title><rect x="95.2174%" y="164" width="1.7391%" height="15" fill="rgb(244,70,9)" fg:x="219" fg:w="4"/><text x="95.4674%" y="174.50"></text></g><g><title>binsearch (binarysearch.hpp:7) (1 samples, 0.43%)</title><rect x="96.9565%" y="148" width="0.4348%" height="15" fill="rgb(217,125,39)" fg:x="223" fg:w="1"/><text x="97.2065%" y="158.50"></text></g><g><title>&lt;module&gt; (binarysearch_native.py:8) (226 samples, 98.26%)</title><rect x="0.0000%" y="68" width="98.2609%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="226"/><text x="0.2500%" y="78.50">&lt;module&gt; (binarysearch_native.py:8)</text></g><g><title>benchmark_native_binary_search (_binarysearch.pyx:30) (226 samples, 98.26%)</title><rect x="0.0000%" y="84" width="98.2609%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="226"/><text x="0.2500%" y="94.50">benchmark_native_binary_search (_binarysearch.pyx:30)</text></g><g><title>_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:30) (226 samples, 98.26%)</title><rect x="0.0000%" y="100" width="98.2609%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="226"/><text x="0.2500%" y="110.50">_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:30)</text></g><g><title>_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:33) (203 samples, 88.26%)</title><rect x="10.0000%" y="116" width="88.2609%" height="15" fill="rgb(238,131,9)" fg:x="23" fg:w="203"/><text x="10.2500%" y="126.50">_binarysearch_benchmark_native_binary_search (_binarysearch.pyx:33)</text></g><g><title>_binarysearch_native_binary_search (_binarysearch.pyx:14) (167 samples, 72.61%)</title><rect x="25.6522%" y="132" width="72.6087%" height="15" fill="rgb(211,50,8)" fg:x="59" fg:w="167"/><text x="25.9022%" y="142.50">_binarysearch_native_binary_search (_binarysearch.pyx:14)</text></g><g><title>binsearch (binarysearch.hpp:9) (2 samples, 0.87%)</title><rect x="97.3913%" y="148" width="0.8696%" height="15" fill="rgb(245,182,24)" fg:x="224" fg:w="2"/><text x="97.6413%" y="158.50"></text></g><g><title>all (230 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(242,14,37)" fg:x="0" fg:w="230"/><text x="0.2500%" y="62.50"></text></g><g><title>munmap (libc-2.31.so) (4 samples, 1.74%)</title><rect x="98.2609%" y="68" width="1.7391%" height="15" fill="rgb(246,228,12)" fg:x="226" fg:w="4"/><text x="98.5109%" y="78.50"></text></g></svg></svg>